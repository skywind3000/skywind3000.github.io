<!DOCTYPE HTML>
<!--?xml version="1.0" encoding="UTF-8" ?--><!-- -*- coding: utf-8 -*-  --><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN" "http://www.w3.org/2002/04/xhtml-math-svg/xhtml-math-svg.dtd"><HTML 
xml:lang="zh_CN" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/1999/xhtml"><HEAD><META 
content="IE=11.0000" http-equiv="X-UA-Compatible">
                              <TITLE>Unix Toolbox - 中文版</TITLE>   
<META http-equiv="Content-Type" content="text/html; charset=utf-8">
<META name="author" content="Colin Barschel c@cb.vu">   
<META name="copyright" content="Copyright © 2007-2008 Colin Barschel and Greco Shi. Some rights reserved under Creative Commons [Attribution - Share Alike]"> 
  
<META name="description" content="A collection of Unix/Linux/BSD commands and tasks which are useful for IT work or for advanced users, a compact and practical reference."> 
  
<META name="abstract" content="Unix Toolbox a compact and practical reference for sysadmins and advanced users."> 
  
<META name="subject" content="Unix Toolbox revision 12">   
<META name="keywords" content="Unix Toolbox, Unix tools, Unix, FreeBSD, Linux, commands list, sysadmin, practical guide, advanced reference, common Linux tasks, syntax reminder, howtos, ssh tunnels, rsync, ssl certificates"> 
  
<STYLE type="text/css">
/* basic CSS common to all media */
html {
    margin: 0;
}
body {
    padding: 0;
    font-family: Microsoft YaHei;
    font-size: 90%;
    counter-reset: chapter section;
}
div.title {
    text-transform: uppercase;
    padding: 1em 0;
    text-align: center;
    font-size: 220%;
    font-weight: bold;
    letter-spacing: .22em;
}
h1, h2, h3 div.title {
    font-family: Microsoft YaHei;
}
h1 {
    text-transform: uppercase;
    font-size: 150%;
    letter-spacing: .15em;
    counter-reset: section;
    string-set: chaptertitle content();
}
h2 {
    font-size: 120%;
    letter-spacing: .10em;
}
h3, h4 {
    font-size: 100%;
    line-height:1em;
    letter-spacing: .07em;
}
h4 {
    font-style: italic;
    font-weight: normal;
    margin: 1em 0 0.5em 0;
}
pre {
    padding: 0.1em 0em 0.1em 1em;
}
div.menu a {
    font-weight: normal;
    text-decoration: none;
}
h1:before {
    content: counter(chapter) " ";
    counter-increment: chapter;
}
h2:before {
    counter-increment: section;
    content: counter(chapter) "." counter(section) " ";
}
/* Not implemented in browsers yet */
a.xref:after { 
    content: " " target-counter(attr(href, url), chapter) "."
    target-counter(attr(href, url), section); 
}
div.changestyle {
    padding-top: 1em;
}

@media screen, handheld {
/* Menu on the right for screen media */
/* including some IE6 hacks */
    body {
        padding: 0;
        margin: 1em 13em 0em 1.5em;
    }	
    html>body {
        margin: 1em 13em 0em 1.5em;
    }
    body>div.menu {
        position: fixed;
    }
    body>div.changestyle {
        position: fixed;
    }
    div.menu { 
        position: absolute;
        z-index: 2;
        width: 10.7em; height: auto;
        top: 0.4em; right: 0.5em; bottom: 0.8em; left: auto;
    }
    div.changestyle {
        font-size: 80%;
        font-weight: normal;
        position: absolute;
        z-index: 2;
        width: 10.7em; height: auto;
        bottom: 0;
    }
    ol.toc, ol.toc li  {
        margin: 0;
        list-style-type: none;
        padding: 0.13em 0;
        text-indent: 0;
        text-align: left;
        line-height: 1.1em;
    }
    p.last {
        padding-top: 5em;
    }
    .fn {
        display: none;
        counter-increment: footnote
    }
}

@media print {
/* layout */
/* Menu as TOC for print */
    body {
        font-size: 88%;
        font-family: Microsoft YaHei;
    }	
    div.title {
        padding: 0.5em 0 2em 0;
    }
    div {
        text-align: justify;
    }
    h2 {
        margin-bottom: 0.9em;
    }
    h3 {
        margin-bottom: 0.7em;
    }
    pre {
        font-size: 90%;
        margin: 0.4em 0;
        padding: 0.2em 0 0.2em 0.4em;
        text-align: left;
        line-height: 117%
        font-family: Microsoft JhengHei;
    }
    a {
	text-decoration: none;
    }
    p.xrefp {  /* links below h1 headers */
        padding-top: 0;
        margin: -0.9em 0 1.3em 0;
        page-break-inside: avoid;
        page-break-after: avoid;
    }
    a.xrefp {
        font-weight: normal;
        text-decoration: none;
    }
    ol.toc li  {
        list-style-type: decimal;
        margin: 0;
        padding: 0.25em 0;
    }
    ol.toc  {
        margin: 0 0 0 2.2em;
        list-style-position: outside;
        font-weight: normal;
        list-style-type: decimal;
        padding: 4em 0;
    }
    ol.toc a::after {
        content: leader(' . ') target-counter(attr(href), page);
    }
/*
a.xref:after { 
    content: " [" target-counter(attr(href, url), chapter) "."
    target-counter(attr(href, url), section) " page " 
    target-counter(attr(href, url), page) "]"; 
}
*/
    a.xref:after { 
        content: " (page " target-counter(attr(href, url), page) ")"; 
    }
    a.xrefp:after { 
        content: " (p"target-counter(attr(href, url), page)")"; 
    }
    h1, h2, h3, h4, h5 { 
        page-break-after: avoid;
    }
    div.footerfirst, div.footerlast {
        position: absolute;
        bottom: 0;
    }
    div.main {
        page-break-before: always;
    }
    div.pb {
        page-break-after: always;
    }
    div.changestyle, p.copyright, span.web {
        display: none;
    }
    div#sysinfo {
        margin-top: -1.5em;
    }
    p.last {
        padding-top: 2em;
    }
    .fn {
        display: prince-footnote;
        counter-increment: footnote;
        font-size: 80%;
    }
    .fn::footnote-call {
        content: counter(footnote);
        font-size: 80%;
        vertical-align: super;
        line-height: none
    }
    .fn::footnote-marker {
        list-style-position: inside;
    }
}
@page {
    size: A4 portrait;
    margin: 16mm 14mm 14mm 12mm;
    padding: 0mm 0 5mm 0;
    @footnotes {
	border-top: solid #000040 thin;
	padding-top: 0.22em;
        padding-left: 1.2em;

    }
    @bottom-center {
        padding: 0 0 5mm 0;
        content: counter(page);

        font-size: 88%;
    }
    @top {
        padding-top: 5mm;
	content: "&#8212; " string(chaptertitle) " &#8212;";

    }
}
@page :first {
    padding: 0;
    @bottom-center {
        content: normal;
    }
    @top {
        content: normal;
    }
}


</STYLE>
 
<STYLE title="default" type="text/css">
@media screen, handheld, print {
/* Colors only */
html {
    background-color: white;
    color: black;
}
h1 {
    background-color: #000040;
    color: white;
}
h3, h4, div.title, h2, a:link, a:visited, .cmt {
    background-color: transparent;
    color: #000040;
}
pre {
    background-color: #F6F6FC;
}
pre, code { 
    color: #003300;
}
a:hover, .pp {
    color: #D55500;
}
a:active {
    color: green;
}
.keyword {
    color:#0000FF;
}
}
@media print {
/* print only colors */
pre, code { 
    color: #000;
}
a:link, a:visited, .cmt {
    background-color: transparent;
    color: #000060;
}
}
</STYLE>
 
<STYLE title="inverse" type="text/css">
@media screen, handheld {
/* Colors only */
html {
    background-color: black;
    color: Gainsboro;
}
h1 {
    background-color: #ffffcd;
    color: black;
}
h3, h4, div.title, h2, a:link, a:visited, .cmt {
    background-color: transparent;
    color: #ffffcd;
}
pre {
    background-color: #090903;
}
pre, code { 
    color: #ffc3ff;
}
a:hover, .pp {
    color: #2aaaff;
}
a:active {
    color: orange;
}
.keyword {
    color:#ff0000;
}
}
</STYLE>
   <!-- Script to change the color of the site via the above two styles and
       save the selection into a cookie. The cookie is only generated when
       either the link "white" or "black" is clicked --> 
  <!-- This does not word on Safari and Konqueror. Can someone fix it? --> 
<SCRIPT type="text/javascript">
/*<![CDATA[*/

function initCSS() {
  var cookie = readCookie("style");
  var title = cookie ? cookie : "default";
  setActiveStyle(title);
}

function setActiveStyle(title) {
  var j = document.getElementsByTagName("style");
  for(var i=1; i < j.length; i++) { // bypass the first (main) style
    j[i].disabled = true;
    if(j[i].getAttribute("title") == title) {
        j[i].disabled = false;
    }
  }
}

/* Only create a cookie when the link is clicked */
function setActiveStyleLink(title) {
  setActiveStyle(title)
  createCookie("style", title, 365);
}

function createCookie(name,value,days) {
  if (days) {
    var date = new Date();
    date.setTime(date.getTime()+(days*24*60*60*1000));
    var expires = "; expires="+date.toGMTString();
  }
  else expires = "";
  document.cookie = name+"="+value+expires+"; path=/";
}

function readCookie(name) {
  var nameEQ = name + "=";
  var ca = document.cookie.split(';');
  for(var i=0;i < ca.length;i++) {
    var c = ca[i];
    while (c.charAt(0)==' ') c = c.substring(1,c.length);
    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
  }
  return null;
}

window.onload = initCSS();

/*]]>*/
</SCRIPT>
 
<META name="GENERATOR" content="MSHTML 11.00.9600.17924"></HEAD> 
<BODY>
<DIV class="title">Unix Toolbox - 中文版</DIV>
<DIV class="abstract">
这是一份收集Unix/Linux/BSD命令和任务的文档，它有助于高级用户或IT工作。它是一份简明扼要的实用指南，当然读者应该知道他/她在干什么。<BR><BR></DIV>
<DIV class="footerfirst">Unix Toolbox 版本：12<BR>你可以到 <A href="http://cb.vu/unixtoolbox.xhtml">http://cb.vu/unixtoolbox.xhtml</A> 
找到本文档的最新版。PDF版本可以替换链接中的.xhtml为 <A href="unixtoolbox.pdf">.pdf</A> 
，小册子版本可以替换成 <A href="unixtoolbox.book.pdf">.book.pdf</A> 。 
用双面打印机可将小册子打印成册。<SPAN class="web">这份XHTML页面可以通过CSS3相兼容的应用程序转换成一份漂亮的PDF文档(看 <A 
class="xref" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#bourneexample">脚本例子</A>).</SPAN><BR>错误报告和评论是最欢迎的 
- <A href="mailto:c\at\cb.vu">mailto:c\at\cb.vu</A> Colin Barschel.<BR>你可以到<A 
href="http://code.google.com/p/unixtoolboxcn/">http://code.google.com/p/unixtoolboxcn/</A>找到中文最新版。<BR>
也可到我的主页获取<A 
href="http://silenceisdefeat.org/~greco/unixtoolbox_zh_CN.xhtml">http://silenceisdefeat.org/~greco/unixtoolbox_zh_CN.xhtml</A><BR>关于中文版的任何错误和修正请发送E-Mail到 
<A href="mailto:greco.open\at\gmail.com"><!--[CDATA["Greco Shi" <greco.open@gmail.com-->]]&gt;</A> 

<P class="copyright">© <A href="mailto:c_at_cb.vu">Colin Barschel and Greco 
Shi</A> 2007-2008. <A href="http://creativecommons.org/licenses/by-sa/3.0/" rel="license">Some 
rights reserved under Creative Commons</A>. </P></DIV>
<DIV class="menu">
<OL class="toc">
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#sysinfo">系统</A></LI>
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#processes">进程</A></LI>
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#filesystem">文件系统</A></LI>
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#network">网络</A></LI>
  <LI><A href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#ssh">SSH 
  SCP</A></LI>
  <LI><A href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#vpn">使用 SSH 建立 
  VPN</A></LI>
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#rsync">RSYNC</A></LI>
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#sudo">SUDO</A></LI>
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#crypt">文件加密</A></LI>
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#cryptpart">分区加密</A></LI>
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#certs">SSL认证</A></LI>
  <LI><A href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#cvs">CVS</A></LI>
  <LI><A href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#svn">SVN</A></LI>
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#other">实用命令</A></LI>
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#software">软件安装</A></LI>
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#convert">媒体转换</A></LI>
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#printing">打印</A></LI>
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#databases">数据库</A></LI>
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#quota">磁盘限额</A></LI>
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#shells">Shells</A></LI>
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#scripting">脚本</A></LI>
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#programming">编程</A></LI>
  <LI><A 
  href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#onlinehelp">在线帮助</A></LI></OL><BR>
<DIV class="changestyle"><A onclick="setActiveStyleLink('default'); return false;" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#"><svg:svg viewbox="0 0 310 210" 
height="10" width="15"><svg:rect style="fill: white; stroke: black; stroke-width: 7;" 
height="200" width="300" y="5" x="5"><svg:line style="stroke: black; stroke-width: 7;" 
y2="55" x2="280" y1="55" x1="25"><svg:line style="stroke: black; stroke-width: 7;" 
y2="100" x2="280" y1="100" x1="25"><svg:line style="stroke: black; stroke-width: 7;" 
y2="148" x2="280" y1="148" x1="25"></svg:line> 白色 
</svg:line></svg:line></svg:rect></svg:svg></A> <A onclick="setActiveStyleLink('inverse'); return false;" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#"><svg:svg viewbox="0 0 310 210" 
height="10" width="15"><svg:rect style="fill: black; stroke: white; stroke-width: 7;" 
height="200" width="300" y="5" x="5"><svg:line style="stroke: white; stroke-width: 10;" 
y2="55" x2="280" y1="55" x1="25"><svg:line style="stroke: white; stroke-width: 10;" 
y2="100" x2="280" y1="100" x1="25"><svg:line style="stroke: white; stroke-width: 10;" 
y2="148" x2="280" y1="148" x1="25"></svg:line> 黑色 
</svg:line></svg:line></svg:rect></svg:svg></A> </DIV><!-- end change style links --> 
</DIV><!-- end menu --> 
<DIV class="pb"><!-- <div class="main"> Every chapter is inside a div block for easy XML parsing --> 
<DIV id="sysinfo">
<H1><A>系统</A></H1>
<P class="xrefp"><A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#hardwareinfo">硬件</A> 
| <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#loadstats">状态信息</A> 
| <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#users">用户</A> | <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#limits">限制</A> | <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#runlevels">运行级别</A> | <A 
class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#resetpasswd">root 密码</A> | 
<A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#compilekernel">编译内核</A></P>
正在运行的内核和系统信息 
<PRE># uname -a                           <SPAN class="cmt"># 获取内核版本（和BSD版本）</SPAN>
# lsb_release -a                     <SPAN class="cmt"># 显示任何 LSB 发行版版本信息</SPAN>
# cat /etc/SuSE-release              <SPAN class="cmt"># 获取 SuSE 版本</SPAN>
# cat /etc/debian_version            <SPAN class="cmt"># 获取 Debian 版本</SPAN>
</PRE>
使用 /etc/<CODE>DISTR</CODE>-release 其中<CODE>DISTR(发行代号)=</CODE> lsb (Ubuntu), 
redhat, gentoo, mandrake, sun (Solaris), 等等。 
<PRE># uptime                             <SPAN class="cmt"># 显示系统开机运行到现在经过的时间</SPAN>
# hostname                           <SPAN class="cmt"># 显示系统主机名</SPAN>
# hostname -i                        <SPAN class="cmt"># 显示主机的 IP 地址</SPAN>
# man hier                           <SPAN class="cmt"># 描述文件系统目录结构</SPAN>
# last reboot                        <SPAN class="cmt"># 显示系统最后重启的历史记录</SPAN>
</PRE>
<H2 id="hardwareinfo">硬件信息</H2>内核检测到的硬件信息 
<PRE># dmesg                              <SPAN class="cmt"># 检测到的硬件和启动的消息</SPAN>
# lsdev                              <SPAN class="cmt"># 关于已安装硬件的信息<SPAN class="fn">译注：许多 Linux 发行版需要自行安装，如：apt-get install procinfo</SPAN></SPAN>
# dd if=/dev/mem bs=1k skip=768 count=256 2&gt;/dev/null | strings -n 8 <SPAN class="cmt"># 读取 BIOS 信息</SPAN>
</PRE>
<H3>Linux</H3>
<PRE># cat /proc/cpuinfo                  <SPAN class="cmt"># CPU 讯息</SPAN>
# cat /proc/meminfo                  <SPAN class="cmt"># 内存信息</SPAN>
# grep MemTotal /proc/meminfo        <SPAN class="cmt"># 显示物理内存大小</SPAN>
# watch -n1 'cat /proc/interrupts'   <SPAN class="cmt"># 监控内核处理的所有中断</SPAN>
# free -m                            <SPAN class="cmt"># 显示已用和空闲的内存信息 (-m 为 MB)<SPAN class="fn">译注：包括 SWAP 分区</SPAN></SPAN>
# cat /proc/devices                  <SPAN class="cmt"># 显示当前核心配置的设备</SPAN>
# lspci -tv                          <SPAN class="cmt"># 显示 PCI 设备</SPAN>
# lsusb -tv                          <SPAN class="cmt"># 显示 USB 设备</SPAN>
# lshal                              <SPAN class="cmt"># 显示所有设备属性列表</SPAN>
# dmidecode                          <SPAN class="cmt"># 显示从 BIOS 中获取的硬件信息</SPAN>
</PRE>
<H3>FreeBSD</H3>
<PRE># sysctl hw.model                    <SPAN class="cmt"># CPU 讯息</SPAN>
# sysctl hw                          <SPAN class="cmt"># 得到很多硬件信息</SPAN>
# sysctl vm                          <SPAN class="cmt"># 虚拟内存使用情况</SPAN>
# dmesg | grep "real mem"            <SPAN class="cmt"># 物理内存</SPAN>
# sysctl -a | grep mem               <SPAN class="cmt"># 内核内存的设置和信息</SPAN>
# sysctl dev                         <SPAN class="cmt"># 显示当前核心配置的设备</SPAN>
# pciconf -l -cv                     <SPAN class="cmt"># 显示 PCI 设备</SPAN>
# usbdevs -v                         <SPAN class="cmt"># 显示 USB 设备</SPAN>
# atacontrol list                    <SPAN class="cmt"># 显示 ATA 设备</SPAN>
</PRE>
<H2 id="loadstats">显示状态信息</H2>以下的命令有助于找出正在系统中运行着的程序。 
<PRE># top                                <SPAN class="cmt"># 显示和更新使用 cpu 最多的进程</SPAN>
# mpstat 1                           <SPAN class="cmt"># 显示进程相关的信息</SPAN>
# vmstat 2                           <SPAN class="cmt"># 显示虚拟内存的状态信息</SPAN>
# iostat 2                           <SPAN class="cmt"># 显示 I/O 状态信息(2 秒 间隙)</SPAN>
# systat -vmstat 1                   <SPAN class="cmt"># 显示 BSD 系统状态信息(1 秒 间隙)</SPAN>
# systat -tcp 1                      <SPAN class="cmt"># 显示 BSD TCP 连接信息(也可以试试 -ip)</SPAN>
# systat -netstat 1                  <SPAN class="cmt"># 显示 BSD 当前网络连接信息</SPAN>
# systat -ifstat 1                   <SPAN class="cmt"># 显示 BSD 当前网卡带宽信息</SPAN>
# systat -iostat 1                   <SPAN class="cmt"># 显示 BSD CPU 和磁盘使用情况</SPAN>
# tail -n 500 /var/log/messages      <SPAN class="cmt"># 显示最新500条内核/系统日志的信息</SPAN>
# tail /var/log/warn                 <SPAN class="cmt"># 显示系统警告信息(看syslog.conf)</SPAN>
</PRE>
<H2 id="users">用户</H2>
<PRE># id                                 <SPAN class="cmt"># 显示当前用户和用户组的 ID</SPAN>
# last                               <SPAN class="cmt"># 列出目前与过去登入系统的用户相关信息<SPAN class="fn">译注：单独执行 last 指令，它会读取位于 /var/log 目录下，名称为 wtmp 的文件，并把该给文件的内容记录的登入系统的用户名单全部显示出来。</SPAN></SPAN>
# who                                <SPAN class="cmt"># 显示目前登入系统的用户信息</SPAN>
# groupadd admin                     <SPAN class="cmt"># 建立新组"admin"和添加新用户 colin 并加入 admin 用户组(Linux/Solaris)</SPAN>
# useradd -c "Colin Barschel" -g admin -m colin
# userdel colin                      <SPAN class="cmt"># 删除用户 colin(Linux/Solaris)</SPAN>
# adduser joe                        <SPAN class="cmt"># FreeBSD 添加用户 joe(交互式)</SPAN>
# rmuser joe                         <SPAN class="cmt"># FreeBSD 删除用户 joe(交互式)</SPAN>
# pw groupadd admin                  <SPAN class="cmt"># 在 FreeBSD 上使用 pw</SPAN>
# pw groupmod admin -m newmember     <SPAN class="cmt"># 添加新用户到一个组</SPAN>
# pw useradd colin -c "Colin Barschel" -g admin -m -s /bin/tcsh 
# pw userdel colin; pw groupdel admin
</PRE>加密过的密码存储在 /etc/shadow (Linux and Solaris) 或 /etc/master.passwd 
(FreeBSD) 中. 如果手动修改了 master.passwd，需要运行 <CODE># pwd_mkdb -p master.passwd</CODE> 
来重建数据库。<BR><BR>使用 nologin 来临时阻止所有用户登录(root除外)。用户登录时将会显示 nologin 中的信息。 
<PRE># echo "Sorry no login now" &gt; /etc/nologin       <SPAN class="cmt"># (Linux)</SPAN>
# echo "Sorry no login now" &gt; /var/run/nologin   <SPAN class="cmt"># (FreeBSD)</SPAN>
</PRE>
<H2 id="limits">限制</H2>某些应用程序需要设置可打开最大文件和 socket 数量(像代理服务器，数据库)。 默认限制通常很低。 
<H3>Linux</H3>
<H4>每 shell/脚本</H4>shell 的限制是受 <CODE>ulimit</CODE> 支配的。使用 <CODE>ulimit -a</CODE> 
可查看其状态信息。 举个例子，改变可打开最大文件数从 1024 到 10240，可以这么做： 
<PRE># ulimit -n 10240                    <SPAN class="cmt"># 这只在shell中有用</SPAN>
</PRE><CODE>ulimit</CODE> 
命令可以使用在脚本中来更改对此脚本的限制。 
<H4>每 用户/进程</H4>登录用户和应用程序的限制可以在 <CODE>/etc/security/limits.conf</CODE> 中配置。举个例子： 
<PRE># cat /etc/security/limits.conf
*   hard    nproc   250              <SPAN class="cmt"># 限制所有用户进程数</SPAN>
asterisk hard nofile 409600          <SPAN class="cmt"># 限制应用程序可打开最大文件数</SPAN>
</PRE>
<H4>系统级</H4>用sysctl来设置内核限制。要使其永久，可以在 <CODE>/etc/sysctl.conf</CODE> 中进行配置。 
<PRE># sysctl -a                          <SPAN class="cmt"># 显示所有系统限制</SPAN>
# sysctl fs.file-max                 <SPAN class="cmt"># 显示系统最大文件打开数</SPAN>
# sysctl fs.file-max=102400          <SPAN class="cmt"># 更改系统最大文件打开数</SPAN>
# cat /etc/sysctl.conf
fs.file-max=102400                   <SPAN class="cmt"># 在 sysctl.conf 中的永久项</SPAN>
# cat /proc/sys/fs/file-nr           <SPAN class="cmt"># 在使用的文件句柄数</SPAN>
</PRE>
<H3>FreeBSD</H3>
<H4>每 shell/脚本</H4>在 csh 或 tcsh 中使用 <CODE>limits</CODE> 命令，在 sh 或 bash 中使用 
<CODE>ulimit</CODE> 命令。 
<H4>每 用户/进程</H4>在 <CODE>/etc/login.conf</CODE> 中配置登录后的默认限制。未作限制的值为系统最大限制值。 
<H4>系统级</H4>内核限制同样使用 sysctl 来设置。永久配置，在 <CODE>/etc/sysctl.conf</CODE> 或 
<CODE>/boot/loader.conf</CODE> 中。其语法与 Linux 相同，只是键值不同。 
<PRE># sysctl -a                          <SPAN class="cmt"># 显示所有系统限制</SPAN>
# sysctl kern.maxfiles=XXXX          <SPAN class="cmt"># 最大文件描述符数</SPAN>
kern.ipc.nmbclusters=32768           <SPAN class="cmt"># 在 /etc/sysctl.conf 中的永久项</SPAN>
kern.maxfiles=65536                  <SPAN class="cmt"># Squid<SPAN class="fn">译注：代理服务器</SPAN> 通常用这个值</SPAN>
kern.maxfilesperproc=32768
kern.ipc.somaxconn=8192              <SPAN class="cmt"># TCP 列队。apache/sendmail 最好用这个值</SPAN>
# sysctl kern.openfiles              <SPAN class="cmt"># 在使用的文件描述符数</SPAN>
# sysctl kern.ipc.numopensockets     <SPAN class="cmt"># 已经开启的 socket 数目</SPAN>
</PRE>
详情请看 <A href="http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/configtuning-kernel-limits.html">FreeBSD 
手册 11章</A><SPAN 
class="fn">http://www.freebsd.org/handbook/configtuning-kernel-limits.html</SPAN>。 
<H3>Solaris</H3>在 <CODE>/etc/system</CODE> 中的下列设置，会提高每个进程可以打开最大文件描述符的数量： 
<PRE>set rlim_fd_max = 4096               <SPAN class="cmt"># 一个进程可以打开文件描述符的"硬"限制</SPAN>
set rlim_fd_cur = 1024               <SPAN class="cmt"># 一个进程可以打开文件描述符的"软"限制</SPAN>
</PRE>
<H2 id="runlevels">运行级别</H2>
<H3>Linux</H3>一旦内核加载完成，内核会启动 <CODE>init</CODE> 进程，然后运行 <CODE>rc</CODE><SPAN 
class="fn">译注：/etc/rc.d/rc</SPAN> 脚本，之后运行所有属于其运行级别的命令脚本。这些脚本都储存在 /etc/rc.d/rcN.d 
中(N代表运行级别)，并且都建立着到 /etc/init.d 子目录中命令脚本程序的符号链接。<BR>默认运行级别配置在 /etc/inittab 中。它通常为 
3 或 5： 
<PRE># grep default: /etc/inittab                                         
id:3:initdefault:
</PRE>可以使用 
<CODE>init</CODE> 来改变当前运行级别。举个例子： 
<PRE># init 5                             <SPAN class="cmt"># 进入运行级别 5</SPAN></PRE>运行级别列表如下： 
<UL style="list-style-type: none; page-break-inside: avoid;">
  <LI>0 &nbsp; &nbsp; &nbsp; 系统停止</LI>
  <LI>1 &nbsp; &nbsp; &nbsp; 进入单用户模式(也可以是 S)</LI>
  <LI>2 &nbsp; &nbsp; &nbsp; 没有 NFS 特性的多用户模式</LI>
  <LI>3 &nbsp; &nbsp; &nbsp; 完全多用户模式(正常操作模式)</LI>
  <LI>4 &nbsp; &nbsp; &nbsp; 未使用</LI>
  <LI>5 &nbsp; &nbsp; &nbsp; 类似于级别3，但提供 XWindow 系统登录环境</LI>
  <LI>6 &nbsp; &nbsp; &nbsp; 重新启动系统</LI></UL>使用 <CODE>chkconfig</CODE> 
工具控制程序在一个运行级别启动和停止。 
<PRE># chkconfig --list                   <SPAN class="cmt"># 列出所有 init 脚本</SPAN>
# chkconfig --list sshd              <SPAN class="cmt"># 查看 sshd 在各个运行级别中的启动配置</SPAN>
# chkconfig sshd --level 35 on       <SPAN class="cmt"># 对 sshd 在级别 3 和 5 下创建启动项</SPAN>
# chkconfig sshd off                 <SPAN class="cmt"># 在所有的运行级别下禁用 sshd</SPAN>
</PRE>
Debian 和基于Debian 发行版像 Ubuntu 或 Knoppix 使用命令 <CODE>update-rc.d</CODE> 
来管理运行级别脚本。默认启动为 2,3,4 和 5，停止为 0,1 和 6。 
<PRE># update-rc.d sshd defaults          <SPAN class="cmt"># 设置 sshd 为默认启动级别</SPAN>
# update-rc.d sshd start 20 2 3 4 5 . stop 20 0 1 6 .  <SPAN class="cmt"># 用显示参数</SPAN>
# update-rc.d -f sshd remove         <SPAN class="cmt"># 在所有的运行级别下禁用 sshd</SPAN>
# shutdown -h now (或者 # poweroff)  <SPAN class="cmt"># 关闭停止系统</SPAN>
</PRE>
<H3>FreeBSD</H3>BSD 启动步骤不同于 SysV, 她没有运行级别。她的启动状态(单用户，有或没有 XWindow)被配置在 
<CODE>/etc/ttys</CODE>中。所有的系统脚本都位于 <CODE>/etc/rc.d/</CODE>中，第三方应用程序位于 
<CODE>/usr/local/etc/rc.d/</CODE>中。service 的启动顺序被配置在 <CODE>/etc/rc.conf</CODE> 
和<CODE>/etc/rc.conf.local</CODE>中。默认行为可在 <CODE>/etc/defaults/rc.conf</CODE> 
中进行配置。 这些脚本至少响应 start|stop|status. 
<PRE># /etc/rc.d/sshd status
sshd is running as pid 552.
# shutdown now                       <SPAN class="cmt"># 进入单用户模式</SPAN>
# exit                               <SPAN class="cmt"># 返回到多用户模式</SPAN>
# shutdown -p now                    <SPAN class="cmt"># 关闭停止系统</SPAN>
# shutdown -r now                    <SPAN class="cmt"># 重新启动系统</SPAN>
</PRE>
同样可以使用进程 <CODE>init</CODE> 进入下列状态级别。举个例子： <CODE># init 6</CODE> 为重启。 
<UL style="list-style-type: none; page-break-inside: avoid;">
  <LI>0 &nbsp; &nbsp; &nbsp; 停止系统并关闭电源 (信号 <CODE>USR2</CODE>)</LI>
  <LI>1 &nbsp; &nbsp; &nbsp; 进入单用户模式 (信号 <CODE>TERM</CODE>)</LI>
  <LI>6 &nbsp; &nbsp; &nbsp; 重新启动 (信号 <CODE>INT</CODE>)</LI>
  <LI>c &nbsp; &nbsp; &nbsp; 阻止进一步登录 (信号 <CODE>TSTP</CODE>)</LI>
  <LI>q &nbsp; &nbsp; &nbsp; 重新检查 ttys(5) 文件 (信号 <CODE>HUP</CODE>)</LI></UL>
<H2 id="resetpasswd">重设 root 密码</H2>
<H3>Linux 方法 1</H3>在引导加载器(lilo 或 grub)中，键入如下启选项： 
<PRE>init=/bin/sh</PRE>内核会挂载 root 分区，进程 <CODE>init</CODE> 会启动 bourne shell 而不是 
<CODE>rc</CODE>，然后是运行级别。使用命令 <CODE>passwd</CODE> 设置密码然后重启。别忘了需要在单用户模式下做这些动作。<BR>
如果重启后 root 分区被挂载为只读，重新挂在它为读写： 
<PRE># mount -o remount,rw /
# passwd                             <SPAN class="cmt"># 或者删除 root 密码 (/etc/shadow)</SPAN>
# sync; mount -o remount,ro /        <SPAN class="cmt"># sync 在重新挂在为只读之前 sync 一下</SPAN>
# reboot
</PRE>
<H3>FreeBSD 和 Linux 方法 2</H3>FreeBSD 不会让你这么做。解决方案是用其他操作系统(像系统紧急修复光盘)挂载 root 
分区，然后更改密码。 
<UL>
  <LI>用 live cd 或安装盘启动进入修复模式后，会得到一个 shell。</LI>
  <LI>用 fdisk 查找 root 分区。比如：fdisk /dev/sda</LI>
  <LI>挂载它并使用 chroot 命令:</LI></UL>
<PRE># mount -o rw /dev/ad4s3a /mnt
# chroot /mnt                        <SPAN class="cmt"># 改变程序执行时所参考的根目录位置为 /mnt</SPAN>
# passwd
# reboot
</PRE>
<H2 id="kernelmodules">内核模块</H2>
<H3>Linux</H3>
<PRE># lsmod                              <SPAN class="cmt"># 列出所有已载入内核的模块</SPAN>
# modprobe isdn                      <SPAN class="cmt"># 载入 isdn 模块</SPAN>
</PRE>
<H3>FreeBSD</H3>
<PRE># kldstat                            <SPAN class="cmt"># 列出所有已载入内核的模块</SPAN>
# kldload crypto                     <SPAN class="cmt"># 载入 crypto 模块</SPAN>
</PRE>
<H2 id="compilekernel">编译内核</H2>
<H3>Linux</H3>
<PRE># cd /usr/src/linux
# make mrproper                      <SPAN class="cmt"># 清除所有东西，包括配置文件</SPAN>
# make oldconfig                     <SPAN class="cmt"># 从当前内核配置文件的基础上创建一个新的配置文件</SPAN>
# make menuconfig                    <SPAN class="cmt"># 或者 xconfig (Qt) 或者 gconfig (GTK)</SPAN>
# make                               <SPAN class="cmt"># 创建一个已压缩的内核映像文件</SPAN>
# make modules                       <SPAN class="cmt"># 编译模块</SPAN>
# make modules_install               <SPAN class="cmt"># 安装模块</SPAN>
# make install                       <SPAN class="cmt"># 安装内核</SPAN>
# reboot
</PRE>
<H3>FreeBSD</H3>要改变和重建内核，需要拷贝源配置文件然后编辑它。当然也可以直接编辑 <CODE>GENERIC</CODE> 文件。 
<PRE># cd /usr/src/sys/i386/conf/
# cp GENERIC MYKERNEL
# cd /usr/src
# make buildkernel KERNCONF=MYKERNEL
# make installkernel KERNCONF=MYKERNEL
</PRE>要重建完全的操作系统： 
<PRE># make buildworld                    <SPAN class="cmt"># 构建完全的系统，但不是内核</SPAN>
# make buildkernel                   <SPAN class="cmt"># 使用 KERNCONF 配置文件编译内核</SPAN>
# make installkernel
# reboot
# mergemaster -p                     <SPAN class="cmt"># 建立临时根环境并比对系统配置文件</SPAN>
# make installworld
# mergemaster                        <SPAN class="cmt"># 升级所有配置和其他文件</SPAN>
# reboot
</PRE>对于源的一些小改动，有时候简单的命令就足够了： 
<PRE># make kernel world                  <SPAN class="cmt"># 编译并安装内核和系统</SPAN>
# mergemaster
# reboot
</PRE></DIV>
<DIV id="processes">
<H1><A>进程</A></H1>
<P class="xrefp"><A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#ps">列表</A> 
| <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#nice">优先级</A> | <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#bgfg">后台/前台</A> | <A 
class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#top">Top</A> 
| <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#kill">Kill</A></P>
<H2 id="ps">进程列表</H2>PID是每个进程唯一号码。使用 <CODE>ps</CODE> 获取所有正在运行的进程列表。 
<PRE># ps -auxefw                         <SPAN class="cmt"># 所有正在运行进程的详尽列表</SPAN></PRE>
然而，更典型的用法是使用管道或者 <CODE>pgrep</CODE>: 
<PRE># ps axww | grep cron
  586  ??  Is     0:01.48 /usr/sbin/cron -s
# ps aux | grep 'ss[h]'              <SPAN class="cmt"># Find all ssh pids without the grep pid</SPAN>
# pgrep -l sshd                      <SPAN class="cmt"># 查找所有进程名中有sshd的进程ID</SPAN>
# echo $$                            <SPAN class="cmt"># The PID of your shell</SPAN>
# fuser -va 22/tcp                   <SPAN class="cmt"># 列出使用端口22的进程</SPAN>
# fuser -va /home                    <SPAN class="cmt"># 列出访问 /home 分区的进程</SPAN>
# strace df                          <SPAN class="cmt"># 跟踪系统调用和信号</SPAN>
# truss df                           <SPAN class="cmt"># 同上(FreeBSD/Solaris/类Unix)</SPAN>
# history | tail -50                 <SPAN class="cmt"># 显示最后50个使用过的命令</SPAN>
</PRE>
<H2 id="nice">优先级</H2>用 <CODE>renice</CODE> 更改正在运行进程的优先级。负值是更高的优先级，最小为-20，其正值与 
"nice" 值的意义相同<SPAN class="fn">译注：进程的优先级通常被称作它的 nice 
值。用户只能对自己所有的进程使用renice命令，root用户可以在任何进程上使用renice命令，只有root用户才能提高进程的优先级</SPAN>。 
<PRE># renice -5 586                      <SPAN class="cmt"># 更强的优先级</SPAN>
586: old priority 0, new priority -5
</PRE>使用 
<CODE>nice</CODE> 命令启动一个已定义优先级的进程。 正值为低优先级，负值为高优先级。确定你知道 
<CODE>/usr/bin/nice</CODE> 或者使用 shell 内置命令<SPAN class="fn">译注：要查看所有 shell 
内置命令，可运行 <CODE># info bash builtin</CODE></SPAN>(<CODE># which nice</CODE>)。 
<PRE># nice -n -5 top                     <SPAN class="cmt"># 更高优先级(/usr/bin/nice)</SPAN>
# nice -n 5 top                      <SPAN class="cmt"># 更低优先级(/usr/bin/nice)</SPAN>
# nice +5 top                        <SPAN class="cmt"># tcsh 内置 nice 命令(同上)</SPAN>
</PRE>nice 
可以影响 CPU 的调度，另一个实用命令 <CODE>ionice</CODE><SPAN 
class="fn">译注：此命令仅可工作在2.6.13及以上内核版本上，并且采用了CFQ 的 IO 调度方式。通过 #cat 
/sys/block/[sh]d[a-z]*/queue/scheduler 命令可以得知你的系统采用了什么样的调度算法</SPAN> 可以调度磁盘 
IO。This is very useful for intensive IO application which can bring a machine to 
its knees while still in a lower priority. 此命令仅可在 Linux (AFAIK) 
上使用。你可以选择一个类型(idle - best effort - real time)，它的 man 页很短并有很好的解释。 
<PRE># ionice c3 -p123                    <SPAN class="cmt"># 给 pid 123 设置为 idle 类型</SPAN>
# ionice -c2 -n0 firefox             <SPAN class="cmt"># 用 best effort 类型运行 firefox 并且设为高优先级</SPAN>
# ionice -c3 -p$$                    <SPAN class="cmt"># 将当前的进程(shell)的磁盘 IO 调度设置为 idle 类型</SPAN>
</PRE>
例中最后一条命令对于编译(或调试)一个大型项目会非常有用。每一个运行于此 shell 的命令都会有一个较低的优先级，但并不妨碍这个系统。$$ 是你 shell 
的 pid (试试 echo $$)。 
<H2 id="bgfg">前台/后台</H2>当一个进程在 shell 中已运行，可以使用 <CODE>[Ctrl]-[Z] (^Z)</CODE>, 
<CODE>bg</CODE> 和 <CODE>fg</CODE> 来 调入调出前后台<SPAN class="fn">译注：在命令后面加 
<CODE>&amp;</CODE> 可直接使其在后台运行。</SPAN>。举个例子：启动 2 个进程，调入后台。使用 <CODE>jobs</CODE> 
列出后台列表，然后再调入一个进程到前台。 
<PRE># ping cb.vu &gt; ping.log
^Z                                   <SPAN class="cmt"># ping 使用 [Ctrl]-[Z] 来暂停(停止)</SPAN> 
# bg                                 <SPAN class="cmt"># 调入后台继续运行</SPAN>
# jobs -l                            <SPAN class="cmt"># 后台进程列表</SPAN>
[1]  - 36232 Running                       ping cb.vu &gt; ping.log
[2]  + 36233 Suspended (tty output)        top
# fg %2                              <SPAN class="cmt"># 让进程 2 返回到前台运行</SPAN>
</PRE>
使用 <CODE>nohup</CODE> 开启一个持续运行的进程直到 shell 被关闭(避免挂断)。 
<PRE># nohup ping -i 60 &gt; ping.log &amp;
</PRE>
<H2 id="top">Top</H2><CODE>top</CODE> 程序用来实时显示系统中各个进程的运行信息。 
<PRE># top</PRE>当 <CODE>top</CODE> 在运行的时候，按下 <CODE>h</CODE><SPAN 
class="fn">译注：也可以是 <CODE>?</CODE></SPAN> 键会显示帮助画面。常用键如下： 
<UL>
  <LI><B>u [用户名]</B> 只显示属于此用户的进程。使用 + 或者空白可以查看所有用户</LI>
  <LI><B>k [PID]</B> 结束 PID 进程</LI>
  <LI><B>1<SPAN class="fn">译注：数字</SPAN></B> 显示所有进程状态信息(只有Linux)</LI>
  <LI><B>R</B> 将当前排序倒转</LI></UL>
<H2 id="kill">Kill命令与信号</H2>使用 <CODE>kill</CODE> 或 <CODE>killall</CODE> 
终止或发送一个信号给进程。 
<PRE># ping -i 60 cb.vu &gt; ping.log &amp;
[1] 4712
# kill -s TERM 4712                  <SPAN class="cmt"># 同 kill -15 4712</SPAN>
# killall -1 httpd                   <SPAN class="cmt"># 发送 HUP 信号终止进程 httpd</SPAN>
# pkill -9 http                      <SPAN class="cmt"># 发送 TERM 信号终止包含 http 的进程</SPAN>
# pkill -TERM -u www                 <SPAN class="cmt"># 发送 TERM 信号终止 www 所有者进程</SPAN>
# fuser -k -TERM -m /home            <SPAN class="cmt"># 终止所有访问 /home 的进程(卸载该分区前)</SPAN>
</PRE>下面是一些重要的信号： 
<UL style="list-style-type: none;">
  <LI>1 &nbsp; &nbsp; &nbsp; <CODE>HUP</CODE> (挂起)</LI>
  <LI>2 &nbsp; &nbsp; &nbsp; <CODE>INT</CODE> (中断)</LI>
  <LI>3 &nbsp; &nbsp; &nbsp; <CODE>QUIT</CODE> (退出)</LI>
  <LI>9 &nbsp; &nbsp; &nbsp; <CODE>KILL</CODE> (KILL 信号不能被捕捉，不能被忽略。)</LI>
  <LI>15 &nbsp; &nbsp; <CODE>TERM</CODE> (软件终止信号)</LI></UL></DIV>
<DIV id="filesystem">
<H1><A>文件系统</A></H1>
<P class="xrefp"><A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#diskinfo">磁盘信息</A> 
| <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#fsboot">Boot</A> | <A 
class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#mountpoints">磁盘使用情况</A> | 
<A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#filesstat">已打开的文件</A> 
| <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#mountcd">挂载/重挂</A> 
| <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#mountsmb">挂载 
SMB</A> | <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#mountimg">挂载映像文件</A> 
| <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#burniso">Burn 
ISO</A> | <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#createimg">Create 
image</A> | <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#creatememdisk">Memory 
disk</A> | <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#diskperf">Disk 
performance</A></P>
<H2 id="permissions">权限</H2>用 <CODE>chmod</CODE> 和 <CODE>chown</CODE> 
更改访问权限和所有权。对于所有用户的默认掩码(umask)可以在 /etc/profile (Linux) 或 /etc/login.conf 
(FreeBSD) 中修改。其默认掩码(umask)通常为 022。掩码可以和777做减法，从而得到755的权限。 
<PRE>1 --x 执行                           <SPAN class="cmt"># Mode 764 = 执行/读/写 | 读/写 | 读</SPAN>
2 -w- 写                             <SPAN class="cmt"># |---所有者|---用户组|---其他用户|</SPAN>
4 r-- 读
  ugo=a                              <SPAN class="cmt">u=所有者, g=用户组, o=其他用户, a=所有用户</SPAN>
</PRE>
<PRE># chmod [OPTION] MODE[,MODE] FILE    <SPAN class="cmt"># MODE 可以是 [ugoa]*([-+=]([rwxXst]))</SPAN>
# chmod 640 /var/log/maillog         <SPAN class="cmt"># 更改 maillog 访问权限为 -rw-r-----</SPAN>
# chmod u=rw,g=r,o= /var/log/maillog <SPAN class="cmt"># 同上</SPAN>
# chmod -R o-r /home/*               <SPAN class="cmt"># 递归去除所有其他用户的可读权限</SPAN>
# chmod u+s /path/to/prog            <SPAN class="cmt"># 在可执行位设置 SUID (知道你在干什么!<SPAN class="fn">当执行一个具有 setuid 权限的文件时，文件的执行过程将具有文件所有者的特权(比如root)。所以，应尽量避免不加选择地创建和使用 root 用户拥有的 seruid 程序或 root 组拥有的 setgid 程序。</SPAN>)</SPAN>
# find / -perm -u+s -print           <SPAN class="cmt"># 查找所有设置过 SUID 位的程序</SPAN>
# chown user:group /path/to/file     <SPAN class="cmt"># 改变文件的所有者和文件关联的组</SPAN>
# chgrp group /path/to/file          <SPAN class="cmt"># 改变文件关联的组</SPAN>
# chmod 640 `find ./ -type f -print` <SPAN class="cmt"># Change permissions to 640 for all files</SPAN>
# chmod 751 `find ./ -type d -print` <SPAN class="cmt"># Change permissions to 751 for all directories</SPAN>
</PRE>
<H2 id="diskinfo">磁盘信息</H2>
<PRE># diskinfo -v /dev/ad2               <SPAN class="cmt"># 显示磁盘信息(扇区/大小) (FreeBSD)</SPAN>
# hdparm -I /dev/sda                 <SPAN class="cmt"># 显示 IDE/ATA 磁盘信息 (Linux)</SPAN>
# fdisk /dev/ad2                     <SPAN class="cmt"># 显示和修改磁盘分区表</SPAN>
# smartctl -a /dev/ad2               <SPAN class="cmt"># 显示磁盘检测信息</SPAN>
</PRE>
<H2 id="fsboot">Boot</H2>
<H3>FreeBSD</H3>如果新内核不能引导，要引导一个旧内核，停止启动倒计时，做如下动作： 
<PRE># unload
# load kernel.old
# boot
</PRE>
<H2 id="mountpoints">系统挂载点/磁盘使用情况</H2>
<PRE># mount | column -t                  <SPAN class="cmt"># 显示系统已挂载分区情况</SPAN>
# df                                 <SPAN class="cmt"># 显示磁盘剩余空间和挂载的设备</SPAN>
# cat /proc/partitions               <SPAN class="cmt"># 显示所有设备的所有分区(Linux)</SPAN>
</PRE>
<H3 id="diskusage">磁盘使用情况</H3>
<PRE># du -sh *                           <SPAN class="cmt"># 列出当前目录下所有文件夹大小</SPAN>
# du -csh                            <SPAN class="cmt"># 当前目录下所有目录大小总数</SPAN>
# du -ks * | sort -n -r              <SPAN class="cmt"># 由大到小排序显示目录大小</SPAN>
# ls -lSr                            <SPAN class="cmt"># 由小到大显示文件列表</SPAN>
</PRE>
<H2 id="filesstat">谁打开了那些文件</H2>对于找出哪些文件阻止卸载分区并给出有代表性的错误是有帮助的： 
<PRE># umount /home/
umount: unmount of /home             <SPAN class="cmt"># 不能卸载，因为有一个文件锁定了 home</SPAN>
   failed: Device busy
</PRE>
<H3>FreeBSD 和大多数 Unix</H3>
<PRE># fstat -f /home                     <SPAN class="cmt"># 对于一个挂载点</SPAN>
# fstat -p PID                       <SPAN class="cmt"># 对于一个应用程序进程 ID</SPAN>
# fstat -u user                      <SPAN class="cmt"># 对于一个用户</SPAN>
</PRE>
查找已打开日志文件(或其他已打开文件)， 比如 Xorg： 
<PRE># ps ax | grep Xorg | awk '{print $1}'
1252
# fstat -p 1252
USER     CMD          PID   FD MOUNT      INUM MODE         SZ|DV R/W
root     Xorg        1252 root /             2 drwxr-xr-x     512  r
root     Xorg        1252 text /usr     216016 -rws--x--x  1679848 r
root     Xorg        1252    0 /var     212042 -rw-r--r--   56987  w
</PRE>在 
/var 中的只有一个 inum 为 212042 的文件： 
<PRE># find -x /var -inum 212042
/var/log/Xorg.0.log
</PRE>
<H3>Linux</H3>使用 <CODE>fuser</CODE> 或 <CODE>lsof</CODE> 在一个挂载点中查找已打开的文件： 
<PRE># fuser -m /home                     <SPAN class="cmt"># 列出访问 /home 的进程</SPAN>
# lsof /home
COMMAND   PID    USER   FD   TYPE DEVICE    SIZE     NODE NAME
tcsh    29029 eedcoba  cwd    DIR   0,18   12288  1048587 /home/eedcoba (guam:/home)
lsof    29140 eedcoba  cwd    DIR   0,18   12288  1048587 /home/eedcoba (guam:/home)
</PRE>关于一个应用程序： 
<PRE>ps ax | grep Xorg | awk '{print $1}'
3324
# lsof -p 3324
COMMAND   PID    USER   FD   TYPE DEVICE    SIZE    NODE NAME
Xorg    3324 root    0w   REG        8,6   56296      12492 /var/log/Xorg.0.log
</PRE>关于单个文件： 
<PRE># lsof /var/log/Xorg.0.log
COMMAND  PID USER   FD   TYPE DEVICE  SIZE  NODE NAME
Xorg    3324 root    0w   REG    8,6 56296 12492 /var/log/Xorg.0.log
</PRE>
<H2 id="mountcd">挂载/重挂载一个文件系统</H2>举个 cdrom 的例子。如果已经列于 /etc/fstab 中： 
<PRE># mount /cdrom</PRE>或在 /dev/ 中查找设备，亦或使用 <CODE>dmesg</CODE> 命令 
<H3>FreeBSD</H3>
<PRE># mount -v -t cd9660 /dev/cd0c /mnt  <SPAN class="cmt"># cdrom</SPAN>
# mount_cd9660 /dev/wcd0c /cdrom     <SPAN class="cmt"># 另外一个方法</SPAN>
# mount -v -t msdos /dev/fd0c /mnt   <SPAN class="cmt"># 软驱</SPAN>
</PRE>/etc/fstab 
中的一条： 
<PRE># Device                Mountpoint      FStype  Options         Dump    Pass#
/dev/acd0               /cdrom          cd9660  ro,noauto       0       0
</PRE>要允许用户做这些，可以这么做： 
<PRE># sysctl vfs.usermount=1  <SPAN class="cmt"># 或者在 /etc/sysctl.conf 中插入一条 "vfs.usermount=1"</SPAN>
</PRE>
<H3>Linux</H3>
<PRE># mount -t auto /dev/cdrom /mnt/cdrom   <SPAN class="cmt"># 典型的 cdrom 挂载命令</SPAN>
# mount /dev/hdc -t iso9660 -r /cdrom   <SPAN class="cmt"># IDE</SPAN>
# mount /dev/sdc0 -t iso9660 -r /cdrom  <SPAN class="cmt"># SCSI</SPAN>
</PRE>
/etc/fstab 中的条目： 
<PRE>/dev/cdrom   /media/cdrom  subfs noauto,fs=cdfss,ro,procuid,nosuid,nodev,exec 0 0</PRE>
<H4>用 Linux 挂载一个 FreeBSD 分区</H4>用 fdisk 查找分区号，这通常是 root 分区，但也可能是其他 BSD slice。如果 
FreeBSD 有许多 slice，他们不列于同一个 fdisk 分区表中，但可见于 /dev/sda* 或 /dev/hda* 中。 
<PRE># fdisk /dev/sda                     <SPAN class="cmt"># 查找 FreeBSD 分区</SPAN>
/dev/sda3   *        5357        7905    20474842+  a5  FreeBSD
# mount -t ufs -o ufstype=ufs2,ro /dev/sda3 /mnt
/dev/sda10 = /tmp; /dev/sda11 /usr   <SPAN class="cmt"># 其他 slice</SPAN>
</PRE>
<H3 id="remount">重挂载</H3>不用卸载一个设备来重挂载。 对 <CODE>fsck</CODE> 来说是必须的。举个例子： 
<PRE># mount -o remount,ro /              <SPAN class="cmt"># Linux</SPAN>
# mount -o ro /                      <SPAN class="cmt"># FreeBSD</SPAN>
</PRE>从 
cdrom 拷贝原始数据进一个 iso 映像文件： 
<PRE># dd if=/dev/cd0c of=file.iso</PRE>
<H2 id="addswap">给即时烧录(on-the-fly)添加 swap</H2>假设你需要很多的 swap (即刻)，如一个 2GB 文件 
/swap2gb (只限 Linux)。 
<PRE># dd if=/dev/zero of=/swap2gb bs=1024k count=2000
# mkswap /swap2gb                    <SPAN class="cmt"># 创建交换区</SPAN>
# swapon /swap2gb                    <SPAN class="cmt"># 激活这个 swap。现在可以使用了</SPAN>
# swapoff /swap2gb                   <SPAN class="cmt"># 当使用完毕，释放这个 swap</SPAN>
# rm /swap2gb
</PRE>
<H2 id="mountsmb">挂载一个 SMB<SPAN class="fn">译注：SMB (Server Message 
Block,服务器信息块)，又称 CIFS (Common Internet File System,通用Internet文件系统)</SPAN> 
共享</H2>假设我们要访问计算机 smbserver 上的名叫 myshare 的 SMB 共享，在 window PC 上键入的地址是 
\\smbserver\myshare\。我挂载到 /mnt/smbshare 上。注意 cifs 必须是 IP 或 DNS 名，不是 Windows 名字。 
<H3>Linux</H3>
<PRE># smbclient -U user -I 192.168.16.229 -L //smbshare/    <SPAN class="cmt"># 列出共享</SPAN>
# mount -t smbfs -o username=winuser //smbserver/myshare /mnt/smbshare
# mount -t cifs -o username=winuser,password=winpwd //192.168.16.229/myshare /mnt/share
</PRE>此外，mount.cifs 
软件包可以存储认证到一个文件中。例如，<CODE>/home/user/.smb</CODE>: 
<PRE>username=winuser
password=winpwd
</PRE>现在可以像下面那样挂载： 
<PRE># mount -t cifs -o credentials=/home/user/.smb //192.168.16.229/myshare /mnt/smbshare</PRE>
<H3>FreeBSD</H3>使用 -I 来获取 IP (或 DNS 名）；smbserver 是 Windows 名。 
<PRE># smbutil view -I 192.168.16.229 //winuser@smbserver    <SPAN class="cmt"># 列出共享</SPAN>
# mount_smbfs -I 192.168.16.229 //winuser@smbserver/myshare /mnt/smbshare
</PRE>
<H2 id="mountimg">挂载镜像文件</H2>
<H3>Linux loop-back</H3>
<PRE># mount -t iso9660 -o loop file.iso /mnt                <SPAN class="cmt"># 挂载 CD 镜像文件</SPAN>
# mount -t ext3 -o loop file.img /mnt                   <SPAN class="cmt"># 用 ext3 文件系统挂载镜像文件</SPAN>
</PRE>
<H3>FreeBSD</H3>用于存储设备 (如果需要做 # kldload md.ko 动作)： 
<PRE># mdconfig -a -t vnode -f file.iso -u 0
# mount -t cd9660 /dev/md0 /mnt
# umount /mnt; mdconfig -d -u 0                         <SPAN class="cmt"># 清除 md 设备</SPAN>
</PRE>
用于虚拟节点： 
<PRE># vnconfig /dev/vn0c file.iso; mount -t cd9660 /dev/vn0c /mnt
# umount /mnt; vnconfig -u /dev/vn0c                    <SPAN class="cmt"># 清除 vn 设备</SPAN>
</PRE>
<H3>Solaris and FreeBSD</H3>用于 loop-back 文件接口或 lofi： 
<PRE># lofiadm -a file.iso
# mount -F hsfs -o ro /dev/lofi/1 /mnt
# umount /mnt; lofiadm -d /dev/lofi/1                   <SPAN class="cmt"># 清除 lofi 设备</SPAN>
</PRE>
<H2 id="burniso">创建并刻录 ISO 镜像文件</H2>这将会拷贝 CD 或者 DVD 的扇区。当不用 
<CODE>conv=notrunc</CODE>，镜像文件会等于 CD 内容大小而非 CD 容量大小。看下面和 <A class="xref" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#dd">dd 
例子</A>。 
<PRE># dd if=/dev/hdc of=/tmp/mycd.iso bs=2048 conv=notrunc</PRE>使用 mkisofs 
把目录中所有文件创建成 CD/DVD 镜像文件。克服文件名限制：-r 开启 Rock Ridge 扩展用于 Unix 系统，-J 开启  Joliet 
扩展用于微软系统。-L 允许 ISO9660 文件名第一个字符为句点。 
<PRE># mkisofs -J -L -r -V TITLE -o imagefile.iso /path/to/dir</PRE>对于 
FreeBSD，mkisofs 可以到 port 的 sysutils/cdrtools 中找到。 
<H3>刻录 ISO 镜像文件</H3>
<H4>FreeBSD</H4>FreeBSD 默认情况下没有在 ATAPI 驱动上启用 DMA。DMA 可用 sysctl 命令启用，其参数如下，或者在 
/boot/loader.conf 中添加如下条目： 
<PRE>hw.ata.ata_dma="1"
hw.ata.atapi_dma="1"
</PRE><CODE>burncd</CODE> 用于 ATAPI 
驱动(<CODE>burncd</CODE> 为基本系统的一部分)，<CODE>cdrecord</CODE> (在 sysutils/cdrtools 
中)用于 SCSI 驱动。 
<PRE># burncd -f /dev/acd0 data imagefile.iso fixate      <SPAN class="cmt"># ATAPI 驱动</SPAN>
# cdrecord -scanbus                  <SPAN class="cmt"># 查找 burner 设备描述符(如 1,0,0)</SPAN>
# cdrecord dev=1,0,0 imagefile.iso
</PRE>
<H4>Linux</H4>对于 Linux，同样使用 <CODE>cdrecord</CODE> 如上文所述。此外，它还可以使用本地 ATAPI 
接口查找设备描述符： 
<PRE># cdrecord dev=ATAPI -scanbus</PRE>然后同上面一样烧录 CD/DVD。 
<H4>dvd+rw-tools</H4><A 
href="http://fy.chalmers.se/~appro/linux/DVD+RW/">dvd+rw-tools</A><SPAN class="fn">http://fy.chalmers.se/~appro/linux/DVD+RW/</SPAN> 
工具包(FreeBSD: ports/sysutils/dvd+rw-tools)可以做上面的一切，其还包括 growisofs 工具来刻录 CD 或 
DVD。本实例所引用的 DVD 设备 <CODE>/dev/dvd</CODE> 可能是指向 <CODE>/dev/scd0</CODE> 
(Linux)的符号连接，或者 <CODE>/dev/cd0</CODE> (FreeBSD)，或者 <CODE>/dev/rcd0c</CODE> 
(NetBSD/OpenBSD)，或者 <CODE>/dev/rdsk/c0t1d0s2</CODE> (Solaris)。对于本实例 <A href="http://www.freebsd.org/handbook/creating-dvds.html">FreeBSD 
手册 18.7 章</A><SPAN 
class="fn">http://www.freebsd.org/handbook/creating-dvds.html</SPAN> 上有一份很好的文档。 
<PRE>          <SPAN class="cmt"># -dvd-compat 选项将完结光盘，光盘便不可再附加数据</SPAN>
# growisofs -dvd-compat -Z /dev/dvd=imagefile.iso     <SPAN class="cmt"># 刻录已存在的 iso 镜像文件</SPAN>
# growisofs -dvd-compat -Z /dev/dvd -J -R /p/to/data  <SPAN class="cmt"># 直接刻录</SPAN>
</PRE>
<H3>转换 Nero .nrg 文件成 .iso</H3>Nero 简单的添加了 300KB 的头到一个常规的 iso 镜像文件中。我们可用 dd 
工具来去除它。 
<PRE># dd bs=1k if=imagefile.nrg of=imagefile.iso skip=300</PRE>
<H3>转换 bin/cue 镜像成 .iso</H3><A 
href="http://freshmeat.net/projects/bchunk/"><CODE>bchunk</CODE> 程序</A><SPAN 
class="fn">http://freshmeat.net/projects/bchunk/</SPAN>可以做到这一点。在 FreeBSD 中，它在 
port 的 sysutils/bchunk 中。 
<PRE># bchunk imagefile.bin imagefile.cue imagefile.iso
</PRE>
<H2 id="createimg">创建基于文件的镜像文件</H2>举个例子，一个使用文件 /usr/vdisk.img 的 1GB 分区。这里我们使用 
vnode 0,但也可为 1。 
<H3>FreeBSD</H3>
<PRE># dd if=/dev/random of=/usr/vdisk.img bs=1K count=1M
# mdconfig -a -t vnode -f /usr/vdisk.img -u 0         <SPAN class="cmt"># 创建设备 /dev/md1</SPAN>
# bsdlabel -w /dev/md0
# newfs /dev/md0c
# mount /dev/md0c /mnt
# umount /mnt; mdconfig -d -u 0; rm /usr/vdisk.img    <SPAN class="cmt"># 清除 md 设备</SPAN>
</PRE>
这个基于文件的镜像文件可以在 /etc/rc.conf 和 /etc/fstab 中配置成启动期间自动挂载。可用 <CODE># 
/etc/rc.d/mdconfig start</CODE> (先用 <CODE># mdconfig -d -u 0</CODE> 命令删除 md0 设备) 
测试你的设置。<BR>需要注意的是，那个自动设置仅工作于这个基于文件的镜像文件不在 root 分区中。原因是 /etc/rc.d/mdconfig 
脚本早于启动就执行了，并且 root 分区仍然是只读的。脚本 /etc/rc.d/mdconfig2 之后，镜像文件将位于 root 
分区外挂载。<BR>/boot/loader.conf: 
<PRE>md_load="YES"</PRE>/etc/rc.conf: 
<PRE># mdconfig_md0="-t vnode -f /usr/vdisk.img"          <SPAN class="cmt"># /usr 不在 root 分区中</SPAN></PRE>/etc/fstab: 
(行后的两个 0 0 很重要，它告诉 fsck 忽略这个设备,现在还不存在。) 
<PRE>/dev/md0                /usr/vdisk      ufs     rw              0       0</PRE>也可能在增加镜像文件的大小之后，如增大到 
300MB。 
<PRE># umount /mnt; mdconfig -d -u 0
# dd if=/dev/zero bs=1m count=300 &gt;&gt; /usr/vdisk.img
# mdconfig -a -t vnode -f /usr/vdisk.img -u 0
# growfs /dev/md0
# mount /dev/md0c /mnt                                <SPAN class="cmt"># 文件分区现在为 300MB</SPAN>
</PRE>
<H3>Linux</H3>
<PRE># dd if=/dev/zero of=/usr/vdisk.img bs=1024k count=1024
# mkfs.ext3 /usr/vdisk.img
# mount -o loop /usr/vdisk.img /mnt
# umount /mnt; rm /usr/vdisk.img                      <SPAN class="cmt"># 清楚</SPAN>
</PRE>
<H3 id="losetup">Linux with losetup</H3><CODE>/dev/zero</CODE> 比 
<CODE>urandom</CODE> 更快，但对于加密来说却不够安全。 
<PRE># dd if=/dev/urandom of=/usr/vdisk.img bs=1024k count=1024
# losetup /dev/loop0 /usr/vdisk.img                   <SPAN class="cmt"># 创建并联结 /dev/loop0</SPAN>
# mkfs.ext3 /dev/loop0
# mount /dev/loop0 /mnt
# losetup -a                                          <SPAN class="cmt"># 查看已经挂载的 loop 设备</SPAN>
# umount /mnt
# losetup -d /dev/loop0                               <SPAN class="cmt"># Detach</SPAN>
# rm /usr/vdisk.img
</PRE>
<H2 id="creatememdisk">创建基于内存的文件系统</H2>基于内存的文件系统对于重量级 IO 应用程序来说非常快。怎样创建一个挂载到 
/memdisk 的 64M 分区： 
<H3>FreeBSD</H3>
<PRE># mount_mfs -o rw -s 64M md /memdisk
# umount /memdisk; mdconfig -d -u 0                   <SPAN class="cmt"># 清除该 md 设备</SPAN>
md     /memdisk     mfs     rw,-s64M    0   0         <SPAN class="cmt"># /etc/fstab 条目</SPAN>
</PRE>
<H3>Linux</H3>
<PRE># mount -t tmpfs -osize=64m tmpfs /memdisk
</PRE>
<H2 id="diskperf">磁盘性能</H2>在 ad4s3c (/home) 分区上读写一个 1GB 的文件。 
<PRE># time dd if=/dev/ad4s3c of=/dev/null bs=1024k count=1000
# time dd if=/dev/zero bs=1024k count=1000 of=/home/1Gb.file
# hdparm -tT /dev/hda      <SPAN class="cmt"># 仅限 Linux</SPAN>
</PRE></DIV>
<DIV id="network">
<H1><A>网络</A></H1>
<P class="xrefp"><A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#routing">路由</A> 
| <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#secondip">额外 
IP</A> | <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#changemac">更改 
MAC 地址</A> | <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#ports">端口</A> 
| <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#firewall">防火墙</A> 
| <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#ipforward">IP 
转发</A> | <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#nat">NAT</A> 
| <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#dns">DNS</A> | <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#dhcp">DHCP</A> | <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#traffic">通信量</A> | <A 
class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#trafficctrl">QoS</A> | <A 
class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#nis">NIS</A></P>
<H2 id="netdebug">调试 (也可看<A class="xref" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#traffic">流量分析)</A></H2>
<H3>Linux</H3>
<PRE># ethtool eth0              <SPAN class="cmt"># 显示以太网状态(replaces mii-diag)</SPAN>
# ethtool -s eth0 speed 100 duplex full <SPAN class="cmt"># 把网卡 eth0 速度改为 100兆/秒，采用全双工</SPAN>
# ethtool -s eth0 autoneg off <SPAN class="cmt"># 禁用自动协商模式</SPAN>
# ethtool -p eth1           <SPAN class="cmt"># 闪烁网络接口 LED 灯 - 如果支持的话，非常实用</SPAN>
# ip link show              <SPAN class="cmt"># 在 Linux 上显示所有网络接口(同 ifconfig 类似)</SPAN>
# ip link set eth0 up       <SPAN class="cmt"># 使设备激活(或Down掉)。同 "ifconfig eth0 up"</SPAN>
# ip addr show              <SPAN class="cmt"># 在 Linux 上显示所有 IP 地址(与 ifconfig 类似)</SPAN>
# ip neigh show             <SPAN class="cmt"># 与 arp -a 类似</SPAN>
</PRE>
<H3>其他系统</H3>
<PRE># ifconfig fxp0             <SPAN class="cmt"># 查看 "media" 字段(FreeBSD)</SPAN>
# arp -a                    <SPAN class="cmt"># 查看路由(或主机) ARP 条目(所有系统)</SPAN>
# ping cb.vu                <SPAN class="cmt"># 第一个要试的事情...</SPAN>
# traceroute cb.vu          <SPAN class="cmt"># 列印到目的地的路由路径</SPAN>
# ifconfig fxp0 media 100baseTX mediaopt full-duplex <SPAN class="cmt"># 100兆/秒 全双工(FreeBSD)</SPAN>
# netstat -s                <SPAN class="cmt"># 对每个网络协议做系统级分析</SPAN>
</PRE>
另一些命令，虽然不总是默认安装，但很好找： 
<PRE># arping 192.168.16.254     <SPAN class="cmt"># 在网络层上 Ping</SPAN>
# tcptraceroute -f 5 cb.vu  <SPAN class="cmt"># 使用 tcp 替换 icmp 来跟踪，透过防火墙</SPAN>
</PRE>
<H2 id="routing">路由</H2>
<H3>列印路由表</H3>
<PRE># route -n                  <SPAN class="cmt"># Linux 或使用 "ip route"</SPAN>
# netstat -rn               <SPAN class="cmt"># Linux, BSD 和 UNIX</SPAN>
# route print               <SPAN class="cmt"># Windows</SPAN>
</PRE>
<H3 id="addroute">添加删除路由</H3>
<H4>FreeBSD</H4>
<PRE># route add 212.117.0.0/16 192.168.1.1
# route delete 212.117.0.0/16
# route add default 192.168.1.1
</PRE>永久的添加路由可在 
/etc/rc.conf 配置文件中设置 
<PRE>static_routes="myroute"
route_myroute="-net 212.117.0.0/16 192.168.1.1"
</PRE>
<H4>Linux</H4>
<PRE># route add -net 192.168.20.0 netmask 255.255.255.0 gw 192.168.16.254
# ip route add 192.168.20.0/24 via 192.168.16.254       <SPAN class="cmt"># 等同于上面命令</SPAN>
# route add -net 192.168.20.0 netmask 255.255.255.0 dev eth0
# route add default gw 192.168.51.254
# ip route add default via 192.168.51.254 dev eth0      <SPAN class="cmt"># 等同于上面命令</SPAN>
# route delete -net 192.168.20.0 netmask 255.255.255.0
</PRE>
<H4>Solaris</H4>
<PRE># route add -net 192.168.20.0 -netmask 255.255.255.0 192.168.16.254
# route add default 192.168.51.254 1                    <SPAN class="cmt"># 1 = 通过此路由跳<SPAN class="fn">译注：数据包生存周期依赖于 IP 头中的生存周期(Time-to-Live，简称 TTL)。根据 RFC 的定义，这个域值由每个路由器来减少。接收到包的每台路由器根据路由该包所花费的秒数，将包中的这个域值减去相应的时间，或直接减 1。因为目前路由器转发包的时间基本小于 1 秒，这个域值基本上在源和目的地之间的没一跳便会减 1。</SPAN>数减 1</SPAN>
# route change default 192.168.50.254 1
</PRE>永久条目配置在 
<CODE>/etc/defaultrouter</CODE> 中。 
<H4>Windows</H4>
<PRE># Route add 192.168.50.0 mask 255.255.255.0 192.168.51.253
# Route add 0.0.0.0 mask 0.0.0.0 192.168.51.254</PRE>使用 
<CODE>add -p</CODE> 来是路由设置永久有效。 
<H2 id="secondip">配置额外的 IP 地址</H2>
<H3>Linux</H3>
<PRE># ifconfig eth0 192.168.50.254 netmask 255.255.255.0       <SPAN class="cmt"># 第一个 IP</SPAN>
# ifconfig eth0:0 192.168.51.254 netmask 255.255.255.0     <SPAN class="cmt"># 第二个 IP</SPAN>
# ip addr add 192.168.50.254/24 dev eth0                   <SPAN class="cmt"># 等价命令</SPAN>
# ip addr add 192.168.51.254/24 dev eth0 label eth0:1
</PRE>
<H3>FreeBSD</H3>
<PRE># ifconfig fxp0 inet 192.168.50.254/24                     <SPAN class="cmt"># 第一个 IP</SPAN>
# ifconfig fxp0 alias 192.168.51.254 netmask 255.255.255.0 <SPAN class="cmt"># 第二个 IP</SPAN>
</PRE>永久条目设置在 
/etc/rc.conf 中 
<PRE>ifconfig_fxp0="inet 192.168.50.254  netmask 255.255.255.0"
ifconfig_fxp0_alias0="192.168.51.254 netmask 255.255.255.0"
</PRE>
<H3>Solaris</H3>用 <CODE>ifconfig -a</CODE> 命令检查设置 
<PRE># ifconfig hme0 plumb                                      <SPAN class="cmt"># 启用网卡</SPAN>
# ifconfig hme0 192.168.50.254 netmask 255.255.255.0 up    <SPAN class="cmt"># 第一个 IP</SPAN>
# ifconfig hme0:1 192.168.51.254 netmask 255.255.255.0 up  <SPAN class="cmt"># 第二个 IP</SPAN>
</PRE>
<H2 id="changemac">更改 MAC 地址</H2>通常在你更改之前先停下网络接口。不要告诉我为什么你想改变 MAC 地址...... 
<PRE># ifconfig eth0 down
# ifconfig eth0 hw ether 00:01:02:03:04:05      <SPAN class="cmt"># Linux</SPAN>
# ifconfig fxp0 link 00:01:02:03:04:05          <SPAN class="cmt"># FreeBSD</SPAN>
# ifconfig hme0 ether 00:01:02:03:04:05         <SPAN class="cmt"># Solaris</SPAN>
# sudo ifconfig en0 ether 00:01:02:03:04:05     <SPAN class="cmt"># Mac OS X Tiger</SPAN>
# sudo ifconfig en0 lladdr 00:01:02:03:04:05    <SPAN class="cmt"># Mac OS X Leopard</SPAN>
</PRE>对于 
Windows 已经有许多工具了。像 <A 
href="http://ntsecurity.nu/toolbox/etherchange/">etherchange</A><SPAN 
class="fn">http://ntsecurity.nu/toolbox/etherchange</SPAN>。或者看看 "Mac Makeup", 
"smac"。 
<H2 id="ports">使用中的端口</H2>监听打开的端口： 
<PRE># netstat -an | grep LISTEN
# lsof -i                                       <SPAN class="cmt"># 列出所有因特网连接(Linux)</SPAN>
# socklist                                      <SPAN class="cmt"># 列出打开的 socket (Linux)</SPAN>
# sockstat -4                                   <SPAN class="cmt"># 使用 socket 的应用程序列表(FreeBSD)</SPAN>
# netstat -anp --udp --tcp | grep LISTEN        <SPAN class="cmt"># Linux</SPAN>
# netstat -tup                                  <SPAN class="cmt"># 列出活跃的连接(Linux)</SPAN>
# netstat -tupl                                 <SPAN class="cmt"># 列出系统中正在监听的端口(Linux)</SPAN>
# netstat -ano                                  <SPAN class="cmt"># Windows</SPAN>
</PRE>
<H2 id="firewall">防火墙</H2>检查正在运行的防火墙(只是典型配置)： 
<H3>Linux</H3>
<PRE># iptables -L -n -v                  <SPAN class="cmt"># 状态信息</SPAN>
Open the iptables firewall
# iptables -P INPUT       ACCEPT     <SPAN class="cmt"># 打开所有</SPAN>
# iptables -P FORWARD     ACCEPT
# iptables -P OUTPUT      ACCEPT
# iptables -Z                        <SPAN class="cmt"># 把所有链的包及字节的计数器清空</SPAN>
# iptables -F                        <SPAN class="cmt"># 清空所有链</SPAN>
# iptables -X                        <SPAN class="cmt"># 删除所有链<SPAN class="fn">译注：链必须没有被引用</SPAN></SPAN>
</PRE>
<H3>FreeBSD</H3>
<PRE># ipfw show                          <SPAN class="cmt"># 状态信息</SPAN>
# ipfw list 65535 <SPAN class="cmt"># 如果显示 "65535 deny ip from any to any"，那防火墙已被禁用</SPAN>
# sysctl net.inet.ip.fw.enable=0     <SPAN class="cmt"># 禁用</SPAN>
# sysctl net.inet.ip.fw.enable=1     <SPAN class="cmt"># 启用</SPAN>
</PRE>
<H2 id="ipforward">路由 IP 转发</H2>
<H3>Linux</H3>查看然后启用 IP 转发： 
<PRE># cat /proc/sys/net/ipv4/ip_forward     <SPAN class="cmt"># 查看 IP 转发 0=禁用, 1=启用</SPAN>
# echo 1 &gt; /proc/sys/net/ipv4/ip_forward
</PRE>或者编辑 
/etc/sysctl.conf： 
<PRE>net.ipv4.ip_forward = 1</PRE>
<H3>FreeBSD</H3>查看并启用： 
<PRE># sysctl net.inet.ip.forwarding          <SPAN class="cmt"># 查看 IP 转发 0=禁用, 1=启用</SPAN>
# sysctl net.inet.ip.forwarding=1
# sysctl net.inet.ip.fastforwarding=1	 <SPAN class="cmt"># 专用路由器或防火墙</SPAN>
Permanent with entry in /etc/rc.conf:
gateway_enable="YES"                     <SPAN class="cmt"># 如果主机是网关则设置为 YES。</SPAN>
</PRE>
<H3>Solaris</H3>
<PRE># ndd -set /dev/ip ip_forwarding 1       <SPAN class="cmt"># 查看 IP 转发 0=禁用, 1=启用</SPAN>
</PRE>
<H2 id="nat">NAT - 网络地址转换</H2>
<H3>Linux</H3>
<PRE># iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE	<SPAN class="cmt"># 激活 NAT</SPAN>
# iptables -t nat -A PREROUTING -p tcp -d 78.31.70.238 --dport 20022 -j DNAT \
--to 192.168.16.44:22           <SPAN class="cmt"># 转发端口 20022 到内部 IP 端口(ssh)</SPAN>
# iptables -t nat -A PREROUTING -p tcp -d 78.31.70.238 --dport 993:995 -j DNAT \
--to 192.168.16.254:993:995     <SPAN class="cmt"># 转发 993-995 范围端口</SPAN>
# ip route flush cache
# iptables -L -t nat            <SPAN class="cmt"># 查看 NAT 状态信息</SPAN>
</PRE>
使用 -D 替换 -A 来删除端口转发。 
<H3>FreeBSD</H3>
<PRE># natd -s -m -u -dynamic -f /etc/natd.conf -n fxp0
Or edit /etc/rc.conf with:
firewall_enable="YES"           <SPAN class="cmt"># 设置 YES 来启用防火墙功能</SPAN>
firewall_type="open"            <SPAN class="cmt"># 防火墙类型(看 /etc/rc.firewall)</SPAN>
natd_enable="YES"               <SPAN class="cmt"># 启用 natd (如果 firewall_enable == YES)。</SPAN>
natd_interface="tun0"           <SPAN class="cmt"># 公共的网络接口或要使用的 IP 地址。</SPAN>
natd_flags="-s -m -u -dynamic -f /etc/natd.conf"
</PRE>端口转发： 
<PRE># cat /etc/natd.conf 
same_ports yes
use_sockets yes
unregistered_only
# redirect_port tcp insideIP:2300-2399 3300-3399  <SPAN class="cmt"># 端口范围</SPAN>
redirect_port udp 192.168.51.103:7777 7777
</PRE>
<H2 id="dns">DNS</H2>在 unix 上，对于所有的网络接口的 DNS 条目都存储在 /etc/resolv.conf 
文件中。主机域也储存在这个文件中。最小化配置如下： 
<PRE>nameserver 78.31.70.238
search sleepyowl.net intern.lab
domain sleepyowl.net
</PRE>检查系统域名： 
<PRE># hostname -d                        <SPAN class="cmt"># 等同于 dnsdomainname</SPAN></PRE>
<H3>Windows</H3>在 Windows 上，DNS 配置于每个网络接口。要显示配置的 DNS 和清空 DNS 缓存可是使用： 
<PRE># ipconfig /?                        <SPAN class="cmt"># 显示帮助</SPAN>
# ipconfig /all                      <SPAN class="cmt"># 显示所有信息包括 DNS</SPAN>
# ipconfig /flushdns                 <SPAN class="cmt"># 清除 DNS 缓存</SPAN>
</PRE>
<H3>转发查询</H3>Dig 是你测试 DNS 设置的好朋友。举个例子，用于测试的 DNS 服务器为 <CODE>213.133.105.2 
ns.second-ns.de</CODE>。查看哪个服务器客户端接收应答(简单应答). 
<PRE># dig sleepyowl.net
sleepyowl.net.          600     IN      A       78.31.70.238
;; SERVER: 192.168.51.254#53(192.168.51.254)
</PRE>路由器 
192.168.51.254 应答了，并返回了一条 A 条目(记录)。任何条目都可查询，DNS 服务器可用 @ 来选定： 
<PRE># dig MX google.com
# dig @127.0.0.1 NS sun.com          <SPAN class="cmt"># 测试本地服务器</SPAN>
# dig @204.97.212.10 NS MX heise.de  <SPAN class="cmt"># 查询外部</SPAN>
# dig AXFR @ns1.xname.org cb.vu      <SPAN class="cmt"># 查看区传送(zone transfer)</SPAN>
</PRE>程式 
host 也很强大。 
<PRE># host -t MX cb.vu                   <SPAN class="cmt"># 获取邮件 MX 记录</SPAN>
# host -t NS -T sun.com              <SPAN class="cmt"># 通过 TCP 连接获取 NS 记录</SPAN>
# host -a sleepyowl.net              <SPAN class="cmt"># 获取所有</SPAN>
</PRE>
<H3>反向查询</H3>查找属于一个 IP 地址(in-addr.arpa.)的域名。可用 <CODE>dig</CODE>, 
<CODE>host</CODE> 和 <CODE>nslookup</CODE> 命令查询： 
<PRE># dig -x 78.31.70.238
# host 78.31.70.238
# nslookup 78.31.70.238
</PRE>
<H3>/etc/hosts</H3>单个主机可以配置于文件 /etc/hosts 来代替本地正在运行的 <CODE>named</CODE> 
反向域名查询。格式很简单，举个例子： 
<PRE>78.31.70.238   sleepyowl.net   sleepyowl</PRE>对于 hosts 文件和 DNS 查询之间的优先级，可在 
<CODE>/etc/nsswitch.conf</CODE> 和 <CODE>/etc/host.conf</CODE> 中配置 order 
名称解析。这个文件同样存在于 Windows 上，通常在： 
<PRE>C:\WINDOWS\SYSTEM32\DRIVERS\ETC</PRE>
<H2 id="dhcp">DHCP</H2>
<H3>Linux</H3>一些发行版(SuSE)使用 dhcpcd 作为客户端。默认网络接口是 eth0。 
<PRE># dhcpcd -n eth0           <SPAN class="cmt"># 触发更新(并不总是可以工作)</SPAN>
# dhcpcd -k eth0           <SPAN class="cmt"># 释放并关闭</SPAN>
</PRE>
租约(lease)的全部信息存储在： 
<PRE>/var/lib/dhcpcd/dhcpcd-eth0.info</PRE>
<H3>FreeBSD</H3>FreeBSD (和 Debian) 使用 <CODE>dhclient</CODE>。要配置一个网络接口(如：bge0)运行： 
<PRE># dhclient bge0</PRE>租约(lease)的全部信息存储在： 
<PRE>/var/db/dhclient.leases.bge0</PRE>使用 
<PRE>/etc/dhclient.conf</PRE>设置 prepend 选项或强制不同的选项： 
<PRE># cat /etc/dhclient.conf
interface "rl0" {
    prepend domain-name-servers 127.0.0.1;
    default domain-name "sleepyowl.net";
    supersede domain-name "sleepyowl.net";
}
</PRE>
<H3>Windows</H3>dhcp 租约(lease)使用 <CODE>ipconfig</CODE> 来更新： 
<PRE># ipconfig /renew          <SPAN class="cmt"># 更新所有适配器</SPAN>
# ipconfig /renew LAN      <SPAN class="cmt"># 更新名叫 "LAN" 的适配器</SPAN>
# ipconfig /release WLAN   <SPAN class="cmt"># 释放名叫 "WLAN" 的适配器</SPAN>
</PRE>
是的，这是一个使用简单名称重新命名你的适配器的好主意！ 
<H2 id="traffic">通信量分析(Traffic analysis)</H2><A href="http://people.suug.ch/~tgr/bmon/">Bmon</A><SPAN 
class="fn">http://people.suug.ch/~tgr/bmon/</SPAN> 
是一个小的流量监控控制台，而且可以显示不同的网络接口的流量。  
<H3>用 tcpdump 嗅探(sniff)</H3>
<PRE># tcpdump -nl -i bge0 not port ssh and src \(192.168.16.121 or 192.168.16.54\)
# tcpdump -l &gt; dump &amp;&amp; tail -f dump               <SPAN class="cmt"># 缓冲输出</SPAN>
# tcpdump -i rl0 -w traffic.rl0                   <SPAN class="cmt"># 把数据报文写入二进制文件</SPAN>
# tcpdump -r traffic.rl0                          <SPAN class="cmt"># 从文件读取数据报文(也可以使用 ethereal)</SPAN>
# tcpdump port 80                                 <SPAN class="cmt"># 两个经典命令</SPAN>
# tcpdump host google.com
# tcpdump -i eth0 -X port \(110 or 143\)          <SPAN class="cmt"># 查看端口 110(POP) 或 143(IMAP)的数据报文</SPAN>
# tcpdump -n -i eth0 icmp                         <SPAN class="cmt"># 只捕获 ping</SPAN>
# tcpdump -i eth0 -s 0 -A port 80 | grep GET      <SPAN class="cmt"># -s 0 为全部包, -A 为 ASCII</SPAN>
</PRE>另一些重要选项： 
<UL style="list-style-type: none;">
  <LI><CODE>-A</CODE> &nbsp; &nbsp; 显示每个包清晰文本(除了报头)</LI>
  <LI><CODE>-X</CODE> &nbsp; &nbsp; 显示包的 ASCII 文本</LI>
  <LI><CODE>-l</CODE> &nbsp; &nbsp; 使标准输出变为缓冲行形式</LI>
  <LI><CODE>-D</CODE> &nbsp; &nbsp; 显示所有可用网络接口</LI></UL>对于 Windows 可以使用 <A href="http://www.winpcap.org/" 
rel="nofollow">http://www.winpcap.org/</A>。使用 windump -D 来列出网络接口。 
<H3>用 nmap 扫描</H3><A href="http://insecure.org/nmap/" 
rel="nofollow">Nmap</A><SPAN class="fn">http://insecure.org/nmap/</SPAN> 是一个用于 
OS 探测的端口扫描工具，她通常在许多发行版上有安装，并且同样可用于 Windows。如果你不扫描你的服务器，骇客们会为你做这些... 
<PRE># nmap cb.vu               <SPAN class="cmt"># 扫描主机上所有保留的 TCP 端口</SPAN>
# nmap -sP 192.168.16.0/24 <SPAN class="cmt"># 找出在 0/24 上主机所使用的 IP<SPAN class="fn">译注：通过使用 "-sP" 参数，进行 ping 扫描。缺省情况下，Nmap给每个扫描到的主机发送一个 ICMP echo 和一个 TCP ACK，主机对任何一种的响应都会被Nmap得到。</SPAN></SPAN>
# nmap -sS -sV -O cb.vu    <SPAN class="cmt"># 做秘密 SYN 扫描来探测系统和系统服务的版本信息</SPAN>
PORT      STATE  SERVICE             VERSION
22/tcp    open   ssh                 OpenSSH 3.8.1p1 FreeBSD-20060930 (protocol 2.0)
25/tcp    open   smtp                Sendmail smtpd 8.13.6/8.13.6
80/tcp    open   http                Apache httpd 2.0.59 ((FreeBSD) DAV/2 PHP/4.
[...]
Running: FreeBSD 5.X
Uptime 33.120 days (since Fri Aug 31 11:41:04 2007)
</PRE>其他非标准但好用的工具有 
<CODE>hping</CODE> (www.hping.org)，她是一个 IP 分组组装/分析器，和 <CODE>fping</CODE> 
(fping.sourceforge.net)。fping 可以在一个循环队列(round-robin fashion)中扫描多种主机。 
<H2 id="trafficctrl">流量控制(QoS)</H2>流量控制管理着一个网络的队列、流量监控、调度以及其他流量设置(traffic 
parameters)。以下简单实用的示例使用 Linux 和 FreeBSD 的能力来更好的利用带宽。 
<H3>上传限制</H3>DSL 或有线调制解调器有一个很长的列队来提高上传吞吐量(upload 
throughput)。然而用一个快速的设备(如以太网)填充这个列队将大大减少交互性。这就是限制设备上传速度有用的原因，以匹配调制解调器的实际能力，这可以有效提高交互性。设置大约为 
modem 最大速度的 90%。 
<H4>Linux</H4>给 512K 上传速度的 modem。 
<PRE># tc qdisc add dev eth0 root tbf rate 480kbit latency 50ms burst 1540
# tc -s qdisc ls dev eth0                         <SPAN class="cmt"># 状态</SPAN>
# tc qdisc del dev eth0 root                      <SPAN class="cmt"># 删除队列</SPAN>
# tc qdisc change dev eth0 root tbf rate 220kbit latency 50ms burst 1540
</PRE>
<H4>FreeBSD</H4>FreeBSD 使用 <CODE>dummynet</CODE> 来控制带宽，其配置工具为 ipfw。Pipe 
用来设置限制带宽的单位[K|M]{比特/秒|字节/秒}，0 意味着没有限制。使用同样的 pipe 数字可重新配置它。举个例子，限制上传带宽为 500K。 
<PRE># kldload dummynet                                <SPAN class="cmt"># 如有必要加载这个模块</SPAN>
# ipfw pipe 1 config bw 500Kbit/s                 <SPAN class="cmt"># 创建一个带宽限制的 pipe</SPAN>
# ipfw add pipe 1 ip from me to any               <SPAN class="cmt"># 转移所有上传进入这个 pipe</SPAN>
</PRE>
<H3>服务质量 (Quality of service)</H3>
<H4>Linux</H4>使用 <CODE>tc</CODE> 的优先级队列来优化 VoIP。在 <A href="http://www.voip-info.org/wiki-QoS+Linux+with+HFS" 
rel="nofollow">voip-info.org</A> 或 <A href="http://www.howtoforge.com/voip_qos_traffic_shaping_iproute2_asterisk" 
rel="nofollow">http://www.howtoforge.com/voip_qos_traffic_shaping_iproute2_asterisk</A> 
上可以看到完整的例子。假设 VoIP 使用 UDP 端口 10000:11024 并且使用 eth0 设备(也可为 ppp0 或 
so)。下列命令定义了三个队列，并且用 QoS <CODE>0x1e</CODE>(设置所有位) 强制 VOIP 流量到队列 1。默认流量流入队列 3，Qos 
<I>Minimize-Delay</I> 流入队列 2。 
<PRE># tc qdisc add dev eth0 root handle 1: prio priomap 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 0
# tc qdisc add dev eth0 parent 1:1 handle 10: sfq
# tc qdisc add dev eth0 parent 1:2 handle 20: sfq
# tc qdisc add dev eth0 parent 1:3 handle 30: sfq
# tc filter add dev eth0 protocol ip parent 1: prio 1 u32 \
  match ip dport 10000 0x3C00 flowid 1:1          <SPAN class="cmt"># 使用服务端端口范围</SPAN>
  match ip dst 123.23.0.1 flowid 1:1              <SPAN class="cmt"># 或/和使用服务器 IP</SPAN>
</PRE>状态和移除： 
<PRE># tc -s qdisc ls dev eth0                         <SPAN class="cmt"># queue status</SPAN>
# tc qdisc del dev eth0 root                      <SPAN class="cmt"># delete all QoS</SPAN>
</PRE>
<H4>计算端口范围和掩码 (mask)</H4>用你所计算的端口掩码来定义 tc 过滤器的端口范围。查询 2^N 
端口范围结尾，推断范围并转换成十六进制。这就是你的掩码 (mask)。例如 10000 -&gt; 11024，它的范围是 1024。 
<PRE># 2^13 (8192) &lt; 10000 &lt; 2^14 (16384)              <SPAN class="cmt"># 结尾是 2^14 = 16384</SPAN>
# echo "obase=16;(2^14)-1024" | bc                <SPAN class="cmt"># 掩码是 0x3C00</SPAN>
</PRE>
<H4>FreeBSD</H4>假设最大连接带宽为 500Kbit/s，我们使用优先级 100:10:1 定义 3 个队列给 VoIP:ssh:剩余所有。 
<PRE># ipfw pipe 1 config bw 500Kbit/s 
# ipfw queue 1 config pipe 1 weight 100
# ipfw queue 2 config pipe 1 weight 10
# ipfw queue 3 config pipe 1 weight 1
# ipfw add 10 queue 1 proto udp dst-port 10000-11024
# ipfw add 11 queue 1 proto udp dst-ip 123.23.0.1 <SPAN class="cmt"># 或/和使用服务器 IP</SPAN>
# ipfw add 20 queue 2 dsp-port ssh
# ipfw add 30 queue 3 from me to any              <SPAN class="cmt"># 剩余所有</SPAN>
</PRE>
状态和移除： 
<PRE># ipfw list                                       <SPAN class="cmt"># 规则信息</SPAN>
# ipfw pipe list                                  <SPAN class="cmt"># 管道信息</SPAN>
# ipfw flush                                      <SPAN class="cmt"># 删除除默认外所有规则</SPAN>
</PRE>
<H2 id="nis">NIS 调试</H2>一些可工作在已配置好的 NIS 客户端上的命令： 
<PRE># ypwhich                  <SPAN class="cmt"># 获取提供 NIS 服务的服务器名</SPAN>
# domainname               <SPAN class="cmt"># 已配置的 NIS 域名</SPAN>
# ypcat group              <SPAN class="cmt"># 列印 NIS 映射 group</SPAN>
# cd /var/yp &amp;&amp; make       <SPAN class="cmt"># 重建 yp 数据库</SPAN>
</PRE>ypbind 
正在运行吗？ 
<PRE># ps auxww | grep ypbind
/usr/sbin/ypbind -s -m -S servername1,servername2	<SPAN class="cmt"># FreeBSD</SPAN>
/usr/sbin/ypbind           <SPAN class="cmt"># Linux</SPAN>
# yppoll passwd.byname
Map passwd.byname has order number 1190635041. Mon Sep 24 13:57:21 2007
The master server is servername.domain.net.
</PRE>
<H3>Linux</H3>
<PRE># cat /etc/yp.conf
ypserver servername
domain domain.net broadcast
</PRE></DIV>
<DIV id="ssh">
<H1><A>SSH SCP</A></H1>
<P class="xrefp"><A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#publickey">公钥认证</A> 
| <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#sshfingerprint">指纹</A> 
| <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#scp">SCP</A> | <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#sshtunnel">隧道(Tunneling)</A></P>
<H2 id="publickey">Public key 
authentication</H2>使用公钥认证而不是密码连接主机。方法是附加你的公钥文件到远程主机。本例中我们用客户端产生的 key <B>从 
<I>host-client</I> 连接到 <I>host-server</I></B>。 
<UL>
  <LI>使用 ssh-keygen 生成密钥对。私钥放在 <CODE>~/.ssh/id_dsa</CODE>，公钥在 
  <CODE>~/.ssh/id_dsa.pub</CODE>。</LI>
  <LI>拷贝你的公钥到服务器的 <CODE>~/.ssh/authorized_keys2</CODE>。</LI></UL>
<PRE># ssh-keygen -t dsa -N ''
# cat ~/.ssh/id_dsa.pub | ssh you@host-server "cat - &gt;&gt; ~/.ssh/authorized_keys2"
</PRE>
<H3>使用来自 ssh.com 的 Windows 客户端</H3>ssh.com 的非商业性版本的客户端可下载自它主 FTP 站点：<A href="http://ftp.ssh.com/pub/ssh/" 
rel="nofollow">ftp.ssh.com/pub/ssh/</A>。 用 ssh.com 客户端产生的密钥需要在 OpenSSH 
服务器上进行转换。可以使用 ssh-keygen 命令来完成。 
<UL>
  <LI>使用 ssh.com 客户端创建一对密钥：Settings - User Authentication - Generate 
New....</LI>
  <LI>我使用 DSA 密钥类型；密钥长度为 2048。</LI>
  <LI>拷贝 ssh.com 客户端产生的公钥到服务器的 ~/.ssh 目录。</LI>
  <LI>她的密钥对在 C:\Documents and Settings\%USERNAME%\Application 
  Data\SSH\UserKeys。</LI>
  <LI>在服务器上使用 ssh-keygen 转换公钥： 
<PRE># cd ~/.ssh
# ssh-keygen -i -f keyfilename.pub &gt;&gt; authorized_keys2
</PRE></LI></UL><I>注意：</I> 
我们使用 DSA 密钥，使用 RSA 密钥也是可以的。这个密钥不受密码保护。 
<H3>在 Windows 上使用 Putty</H3><A href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">Putty</A><SPAN 
class="fn">http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html</SPAN> 
是一个简单并且自由的(MIT许可)<SPAN class="fn">译注：free 不单单是免费</SPAN> ssh Windows 客户端。 
<UL>
  <LI>使用 puTTYgen 程序创建密钥对。</LI>
  <LI>保存密钥对(比如：C:\Documents and Settings\%USERNAME%\.ssh).</LI>
  <LI>拷贝公钥到服务器的 ~/.ssh 目录：     
<PRE># scp .ssh/puttykey.pub root@192.168.51.254:.ssh/</PRE></LI>
  <LI>使用 ssh-keygen 在 OpenSSH 服务器上转换这个公钥： 
<PRE># cd ~/.ssh
# ssh-keygen -i -f puttykey.pub &gt;&gt; authorized_keys2
</PRE></LI>
  <LI>在 Putty 中设置指向私钥的位置：Connection - SSH - Auth</LI></UL>
<H2 id="sshfingerprint">检查指纹</H2>在首次连接时，SSH 
会请求保存不知道的主机指纹。要避免中间人(man-in-the-middle)攻击，服务器的管理员可以发送密钥指纹给客户端，来让其在首次登陆时验证服务器的真实性。使用 
<CODE>ssh-keygen -l</CODE> 获取服务器的指纹： 
<PRE># ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key.pub      <SPAN class="cmt"># RSA 密钥</SPAN>
2048 61:33:be:9b:ae:6c:36:31:fd:83:98:b7:99:2d:9f:cd /etc/ssh/ssh_host_rsa_key.pub
# ssh-keygen -l -f /etc/ssh/ssh_host_dsa_key.pub      <SPAN class="cmt"># DSA 密钥(默认)</SPAN>
2048 14:4a:aa:d9:73:25:46:6d:0a:48:35:c7:f4:16:d4:ee /etc/ssh/ssh_host_dsa_key.pub
</PRE>现在客户端在连接到服务器时可验证其服务器的真实性： 
<PRE># ssh linda
The authenticity of host 'linda (192.168.16.54)' can't be established.
DSA key fingerprint is 14:4a:aa:d9:73:25:46:6d:0a:48:35:c7:f4:16:d4:ee.
Are you sure you want to continue connecting (yes/no)? yes
</PRE>
<H2 id="scp">安全文件传输</H2>一些简单的命令：<BR>
<PRE># scp file.txt host-two:/tmp
# scp joe@host-two:/www/*.html /www/tmp
# scp -r joe@host-two:/www /www/tmp
</PRE>在 
Konqueror 或 Midnight 控制台中，用地址 <STRONG>fish://user@gate</STRONG> 
来访问远程文件系统是可行的，就是比较慢而已。<BR>此外，也可以用基于 SCP 文件系统客户端的 <STRONG>sshfs</STRONG> 
来挂载一个远程目录。<A href="http://fuse.sourceforge.net/sshfs.html">看 fuse sshfs</A><SPAN 
class="fn">http://fuse.sourceforge.net/sshfs.html</SPAN>. 
<H2 id="sshtunnel">隧道(Tunneling)</H2>SSH 隧道可以让你通过 SSH 
连接进行端口转发(转发/反向隧道)，从而确保了传输及端口访问的安全。它只能工作在 TCP 协议上。通常端口转发命令如下(也可看 <A href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#sshnat">ssh 
和 NAT 实例</A>)： 
<PRE># ssh -L localport:desthost:destport user@gate  <SPAN class="cmt"># gate 为目标主机网关</SPAN>
# ssh -R destport:desthost:localport user@gate  <SPAN class="cmt"># 转发你的 localport 到目标端口</SPAN>
# ssh -X user@gate   <SPAN class="cmt"># 转发 X 程序</SPAN>
</PRE>
这将会连接到 gate 并转发端口到目标主机 desthost:destport。注意 desthost 为 gate 中的目标主机名。因此，如果连接到了 
gate，那么 desthost 就是 localhost。也可以做更多的端口转发。 
<H3>在 gate 上直接转发</H3>假设我们想访问在 gate 上运行的 CVS(2401端口) 和 
HTTP(80端口)。下面是个简单的例子，desthost 就是 localhost，我们使用本的端口 8080 代替 80 端口，所以我们不需要 root 
权限。一旦 ssh session 打开，二个服务就都可在本地端口访问。 
<PRE># ssh -L 2401:localhost:2401 -L 8080:localhost:80 user@gate</PRE>
<H3>转发 Netbios 和远程桌面到第二个服务器</H3>假设有一台在 gate 后面没有运行 ssh 的 Winodws SMB 服务器。我们需要访问 
SMB 共享和远程桌面。 
<PRE># ssh -L 139:smbserver:139 -L 3388:smbserver:3389 user@gate</PRE>现在这个 SMB 
共享可以使用 \\127.0.0.1\ 访问，但只能在本地共享关闭的情况下，因为<I>本的共享也是在 139 端口监听的</I>。<BR>
保持本的共享也是可行的，因此我们需要为这个通道使用新 IP 地址来新建一个虚拟设备，SMB 共享将会使用此地址连接。此外，<I>本地 RDP 已经在 3389 
端口监听了</I>，所以我们选择端口 3388。对于这个例子，让我们使用一个虚拟 IP 地址 10.1.1.1。<BR>
<UL>
  <LI>对于 Putty 上使用源端口=10.1.1.1:139。它可以创建多重回路(multiple loop)设备和通道。在 Windows 2000 
  上，只有 Putty 为我工作。</LI>
  <LI>对于 ssh.com 的客户端，要禁用 "Allow local connections only"。因为 ssh.com 
  客户端绑定了所有地址，所以只能连接单个共享。</LI></UL>现在用 IP 地址 10.1.1.1 创建回路(loopback)接口： 
<UL>
  <LI># 系统-&gt;控制面板-&gt;添加硬件 # 是，我已经连接了此硬件(Y) # 添加新的硬件设备(在列表最下面)。</LI>
  <LI># 安装我手动选择的硬件 # 网络适配器 # Microsoft , Microsoft Loopback Adapter。</LI>
  <LI>配置这个假设备的 IP 地址为 10.1.1.1，掩码 255.255.255.0，没有网关。</LI>
  <LI>高级-&gt;WINS，开启 LMHOSTS 查询；禁用 TCP/IP 上的 NetBIOS。</LI>
  <LI># 启用 Microsoft 网络客户端。# 禁用 Microsoft 网络文件和打印机共享</LI></UL>做完这些之后我有重启。现在用 
\\10.1.1.1 连接 SMB 共享和用 10.1.1.1:3388 连接远程桌面。 
<H4>调试</H4>如果不能工作： 
<UL>
  <LI>端口有没有转发：运行控制台运行 netstat -an 命令并查看有没有 0.0.0.0:139 或者 10.1.1.1:139</LI>
  <LI>有没有 telnet 到 10.1.1.1 139？</LI>
  <LI>你需要打开 "本地端口接受其他主机连接"。</LI>
  <LI>"Microsoft 网络文件和打印机共享" 有没有被禁用？</LI></UL>
<H3 id="sshnat">在 NAT 后面连接两个客户端</H3>假设两个客户端在一个 NAT 网关后面，cliadmin 客户端要连接到 cliuser 
客户端(目的地)，两者都可用 ssh 登录到正在运行 sshd 的 gate 上。你不需要 root 权限，只要端口大于 1024 即可。我们在 gate 
上使用 2022 端口。而且，由于 gate 使用与本地，所以网关端口不是必须的。<BR>开启 cliuser 客户端(从目标到 gate)： 
<PRE># ssh -R 2022:localhost:22 user@gate            <SPAN class="cmt"># 转发客户端 22 端口到 gate:2022 端口</SPAN></PRE>
开启 cliadmin 客户端(从主机到 gate)： 
<PRE># ssh -L 3022:localhost:2022 admin@gate         <SPAN class="cmt"># 转发客户端 3022 端口到 gate:2022 端口</SPAN></PRE>
现在 admin 可以直接连接 cliuser 客户端： 
<PRE># ssh -p 3022 admin@localhost                   <SPAN class="cmt"># local:3022 -&gt; gate:2022 -&gt; client:22</SPAN></PRE>
<H3>在 NAT 后面的 VNC 连接</H3>假设一个在 NAT 后面，监听在端口 5900 上可被访问的 Windows VNC 客户端。<BR>开启 
cliwin 客户端到 gate： 
<PRE># ssh -R 15900:localhost:5900 user@gate</PRE>开启 cliadmin 客户端(从主机到 gate)： 
<PRE># ssh -L 5900:localhost:15900 admin@gate</PRE>现在 admin 直接连接到 VNC 客户端： 
<PRE># vncconnect -display :0 localhost</PRE></DIV>
<DIV id="vpn">
<H1><A>使用 SSH 建立 VPN</A></H1>自 4.3 版开始，OpenSSH 可以使用 tun/tap<SPAN 
class="fn">译注：tun 为虚拟点对点设备，tap 为虚拟以太网设备。</SPAN> 设备来加密一个隧道。其非常类似于基于 TLS 的 VPN 
解决方案(像 OpenVPN)。对于 SSH 的一个优势是，她不需要安装和配置额外的软件。另外隧道使用 SSH 认证(像共享密钥)。
 其缺点是，对于一个缓慢的连接， 其传输效率较低。并且这个隧道依赖于单个(易断的) TCP 链接。这个技术对于快速设置一个基于 IP 的 VPN 
来说非常有用。她对于用单个 TCP 端口转发没有限制，并且在所有 3/4 层 协议像 ICMP、TCP/UDP 等上都可用。不管怎么样，下面这些选择在 
sshd_conf 文件中是必须的： 
<PRE>PermitRootLogin yes
PermitTunnel yes
</PRE>
<H2 id="sshp2p">单个 P2P 连接</H2>这里，我们用点对点隧道连接 hclient 和 hserver 两个主机。这个连接是<I>从 
hclient 开始</I>到 hserver 的，并且是用 root 来做。这个通道的连接点是 10.0.1.1(服务端)和 
10.0.1.2(客户端)，然后我们创建设备 tun5(当然也可以是其它数字)。这个过程非常简单： 
<UL>
  <LI>使用 SSH 的通道选项 -w 来连接</LI>
  <LI>设置隧道的 IP 地址。服务端和客户端各一次。</LI></UL>
<H3>连接到服务端</H3>连接始于客户端,然后再服务端执行命令。 
<H4>Linux上的服务端</H4>
<PRE><SPAN class="cmt">cli&gt;#</SPAN> ssh -w5:5 root@hserver
<SPAN class="cmt">srv&gt;#</SPAN> ifconfig tun5 10.0.1.1 netmask 255.255.255.252   <SPAN class="cmt"># 在服务端 shell 上执行</SPAN>
</PRE>
<H4>FreeBSD上的服务端</H4>
<PRE><SPAN class="cmt">cli&gt;#</SPAN> ssh -w5:5 root@hserver
<SPAN class="cmt">srv&gt;#</SPAN> ifconfig tun5 10.0.1.1 10.0.1.2                  <SPAN class="cmt"># 在服务端 shell 上执行</SPAN>
</PRE>
<H3>连接到客户端</H3>在客户端上执行命令： 
<PRE><SPAN class="cmt">cli&gt;#</SPAN> ifconfig tun5 10.0.1.2 netmask 255.255.255.252   <SPAN class="cmt"># Linux上的客户端</SPAN>
<SPAN class="cmt">cli&gt;#</SPAN> ifconfig tun5 10.0.1.2 10.0.1.1                  <SPAN class="cmt"># FreeBSD上的客户端</SPAN>
</PRE>
现在两个主机都连上了，并且可以在任何 3/4 层协议上使用此通道 IP 地址透明的通讯。 
<H2 id="sshg2g">连接两个网络</H2>除上面的 p2p 设置外，一个更有用的是SSH VPN 用两个 gate 
连接两个私有网络。假设有这样一个例子，netA 为 192.168.51.0/24 还有 netB 为  
192.168.16.0/24。设置过程同上面相似，我们只需要添加 routing。如果 gate 不同于默认网关，那在私有网络接口上必须开启 
NAT。<BR>192.168.51.0/24 (netA)|gateA &lt;-&gt; gateB|192.168.16.0/24 (netB)<BR>
<UL>
  <LI>使用隧道选项 -w 连接 SSH。</LI>
  <LI>配置隧道的 IP 地址。服务端和客户端各一次。</LI>
  <LI>为两个网络添加 routing。</LI>
  <LI>如果需要，在 gate 的私有网络接口上开启 NAT。</LI></UL>设置是<I>从 netA 中的 gasteA 开始的</I>. 
<H3>连接 gateA 到 gateB</H3>连接从 gateA 开始，命令执行于 gateB。 
<H4>Linux 上的 gateB</H4>
<PRE><SPAN class="cmt">gateA&gt;#</SPAN> ssh -w5:5 root@gateB
<SPAN class="cmt">gateB&gt;#</SPAN> ifconfig tun5 10.0.1.1 netmask 255.255.255.252 <SPAN class="cmt"># 在 gateB 的 shell 中执行</SPAN>
<SPAN class="cmt">gateB&gt;#</SPAN> route add -net 192.168.51.0 netmask 255.255.255.0 dev tun5
<SPAN class="cmt">gateB&gt;#</SPAN> echo 1 &gt; /proc/sys/net/ipv4/ip_forward         <SPAN class="cmt"># 如果不是默认网关</SPAN>
<SPAN class="cmt">gateB&gt;#</SPAN> iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
</PRE>
<H4>FreeBSD 上的 gateB</H4>
<PRE><SPAN class="cmt">gateA&gt;#</SPAN> ssh -w5:5 root@gateB                          <SPAN class="cmt"># 创建 tun5 设备</SPAN>
<SPAN class="cmt">gateB&gt;#</SPAN> ifconfig tun5 10.0.1.1 10.0.1.2               <SPAN class="cmt"># 在 gateB 的 shell 中执行</SPAN>
<SPAN class="cmt">gateB&gt;#</SPAN> route add 192.168.51.0/24 10.0.1.2
<SPAN class="cmt">gateB&gt;#</SPAN> sysctl net.inet.ip.forwarding=1               <SPAN class="cmt"># 如果不是默认网关</SPAN>
<SPAN class="cmt">gateB&gt;#</SPAN> natd -s -m -u -dynamic -n fxp0                <SPAN class="cmt"># 看 <A class="xref" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#nat">NAT</A></SPAN>
<SPAN class="cmt">gateA&gt;#</SPAN> sysctl net.inet.ip.fw.enable=1
</PRE>
<H3>配置 gateA</H3>在 gateA 上执行命令： 
<H4>Linux 上的 gateA</H4>
<PRE><SPAN class="cmt">gateA&gt;#</SPAN> ifconfig tun5 10.0.1.2 netmask 255.255.255.252
<SPAN class="cmt">gateA&gt;#</SPAN> route add -net 192.168.16.0 netmask 255.255.255.0 dev tun5
<SPAN class="cmt">gateA&gt;#</SPAN> echo 1 &gt; /proc/sys/net/ipv4/ip_forward
<SPAN class="cmt">gateA&gt;#</SPAN> iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
</PRE>
<H4>FreeBSD 上的 gateA</H4>
<PRE><SPAN class="cmt">gateA&gt;#</SPAN> ifconfig tun5 10.0.1.2 10.0.1.1
<SPAN class="cmt">gateA&gt;#</SPAN> route add 192.168.16.0/24 10.0.1.2
<SPAN class="cmt">gateA&gt;#</SPAN> sysctl net.inet.ip.forwarding=1
<SPAN class="cmt">gateA&gt;#</SPAN> natd -s -m -u -dynamic -n fxp0                <SPAN class="cmt"># 看 <A class="xref" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#nat">NAT</A></SPAN>
<SPAN class="cmt">gateA&gt;#</SPAN> sysctl net.inet.ip.fw.enable=1
</PRE>现在两个私有网络都可以通过 
SSH VPN 来透明的连接。如果 gate 不是默认网关，那么 IP 转发和 NAT 
设置都是必须的。在这种情况下，客户端将不知道在哪里转发响应(response)，并且 NAT 必须是开启的。 </DIV>
<DIV id="rsync">
<H1><A>RSYNC</A></H1>Rsync 差不多可以代替 cp 和 scp，此外，断点续传是重启有效的。尾部的斜杠也有着不同的意思，请阅读 man 
页面......这里有一些例子：<BR>拷贝目录中所有内容： 
<PRE># rsync -a /home/colin/ /backup/colin/
# rsync -a /var/ /var_bak/
# rsync -aR --delete-during /home/user/ /backup/      <SPAN class="cmt"># 使用相对路径(看下面)</SPAN>
</PRE>同之前一样，但使用了压缩和网络。Rsync 
使用 SSH 进行传输，并且使用 SSH 密钥，如果设置的话。和 SCP 一样使用 ":"。一个典型的拷贝： 
<PRE># rsync -axSRzv /home/user/ user@server:/backup/user/</PRE>排除在 /home/user/ 
中任何 tmp 目录，并且保持相对目录层次结构，远程目录的结构就是 /backup/home/user/。典型的用于备份的命令。 
<PRE># rsync -azR --exclude /tmp/ /home/user/ user@server:/backup/</PRE>SSH 
连接使用端口 20022： 
<PRE># rsync -az -e 'ssh -p 20022' /home/colin/ user@server:/backup/colin/</PRE>使用 
rsync 守护进程(使用"::")是很快的，但没有透过 SSH 加密。 位置 /backup 定义在了配置文件 /etc/rsyncd.conf 中。变量 
RSYNC_PASSWORD 可以设置用来免除手动输入密码。 
<PRE># rsync -axSRz /home/ ruser@hostname::rmodule/backup/
# rsync -axSRz ruser@hostname::rmodule/backup/ /home/    <SPAN class="cmt"># 回拷贝</SPAN>
</PRE>
一些重要选项： 
<UL style="list-style-type: none;">
  <LI><CODE>-a, --archive</CODE><SPAN style="padding-left: 84px;"> 归档模式，等于 
  -rlptgoD (非 -H)</SPAN></LI>
  <LI><CODE>-r, --recursive</CODE><SPAN style="padding-left: 72px;"> 
  对子目录以递归模式处理</SPAN></LI>
  <LI><CODE>-R, --relative</CODE><SPAN style="padding-left: 78px;"> 
  使用相对路径名</SPAN></LI>
  <LI><CODE>-H, --hard-links</CODE><SPAN style="padding-left: 64px;"> 
  保留硬链结</SPAN></LI>
  <LI><CODE>-S, --sparse</CODE><SPAN style="padding-left: 93px;"> 
  对稀疏文件进行特殊处理以节省DST的空间</SPAN></LI>
  <LI><CODE>-x, --one-file-system</CODE><SPAN style="padding-left: 30px;"> 
  不跨越文件系统边界</SPAN></LI>
  <LI><CODE>--exclude=PATTERN</CODE><SPAN style="padding-left: 58px;"> 
  指定排除不需要传输的文件模式</SPAN></LI>
  <LI><CODE>--delete-during</CODE><SPAN style="padding-left: 72px;"> 
  传输期间删除</SPAN></LI>
  <LI><CODE>--delete-after</CODE><SPAN style="padding-left: 80px;"> 
  传输结束以后再删除</SPAN></LI></UL>
<H2 id="winrsync">在 Windows 上使用 Rsync</H2>可以通过 cygwin 或 独立打包的 <A href="http://sourceforge.net/projects/sereds/">cwrsync</A><SPAN 
class="fn">http://sourceforge.net/projects/sereds</SPAN> 来在 Windows 上运行 
rsync。这对于自动备份来说非常方便。只装其中一个(<I>不是两个</I>)，然后添加路径到 Windows 系统变量中：# 控制面板 -&gt; 系统 
-&gt; 高级标签，环境变量按钮。编辑 "Path" 添加 rsync 的安装路径，比如：C:\Program Files\cwRsync\bin 或者 
C:\cygwin\bin。这可以让 <CODE>rsync</CODE> 和 <CODE>ssh</CODE> 可用于 Windows 命令窗口中。 
<H3>公钥认证</H3>Rsync 是自动使用 SSH 隧道的，因此在服务端使用 SSH 认证。自动备份可免受用户的影响，rsync 命令对于使用 SSH 
公钥认证可以不需要密码。<BR>下面所有的命令都可在 windows 控制台中执行。在控制台(开始 -&gt; 运行 -&gt; cmd)中像在 <A 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#ssh">SSH</A> 
中描述的那样创建和上传密钥，根据你的情况改变 "user" 和 "server"。如果文件 authorized_keys2 不存在，拷贝 id_dsa.pub 
成 authorized_keys2 并上传它。 
<PRE># ssh-keygen -t dsa -N ''                   <SPAN class="cmt"># 创建密钥对</SPAN>
# rsync user@server:.ssh/authorized_keys2 . <SPAN class="cmt"># 从服务器拷贝本地文件</SPAN>
# cat id_dsa.pub &gt;&gt; authorized_keys2        <SPAN class="cmt"># 或者使用编辑器添加这个公钥</SPAN>
# rsync authorized_keys2 user@server:.ssh/  <SPAN class="cmt"># 拷贝文件回服务器</SPAN>
# del authorized_keys2                      <SPAN class="cmt"># 删除本地拷贝</SPAN>
</PRE>
现在测试一下(在同一行里面): 
<PRE>rsync -rv "/cygdrive/c/Documents and Settings/%USERNAME%/My Documents/" \
'user@server:My\ Documents/'
</PRE>
<H3>自动备份</H3>使用批处理文件自动备份并添加到任务计划(程序 -&gt; 附件 -&gt; 系统工具 -&gt; 任务计划)。举个例子，创建批处理文件 
backup.bat 取代 user@server。 
<PRE>@ECHO OFF
REM rsync the directory My Documents
SETLOCAL
SET CWRSYNCHOME=C:\PROGRAM FILES\CWRSYNC
SET CYGWIN=nontsec
SET CWOLDPATH=%PATH%
REM uncomment the next line when using cygwin
SET PATH=%CWRSYNCHOME%\BIN;%PATH%
echo Press Control-C to abort
rsync -av "/cygdrive/c/Documents and Settings/%USERNAME%/My Documents/" \
'user@server:My\ Documents/'
pause
</PRE></DIV>
<DIV id="sudo">
<H1><A>SUDO</A></H1>Sudo 可以给用户一些超级用户的权限而不需要 root 密码。Sudo 
对于一个服务器和工作站混合的多用户环境来说非常有用。使用 sudo 运行命令： 
<PRE># sudo /etc/init.d/dhcpd restart            <SPAN class="cmt"># 用 root 权限运行 rc 脚本</SPAN>
# sudo -u sysadmin whoami                   <SPAN class="cmt"># 使用其他用户运行命令</SPAN>
</PRE>
<H2>配置</H2>Sudo 的配置在 <CODE>/etc/sudoers</CODE> 中，并且只能用 <CODE>visudo</CODE> 
编辑<SPAN class="fn">译注：并不是说不能用其他编辑器编辑，而是因为 <CODE>visudo</CODE> 
会对其语法进行严格检查，避免给系统带来严重后果。</SPAN>。其基本语法是(列表是以逗号分隔的)： 
<PRE>user hosts = (runas) commands          <SPAN class="cmt"># 在 /etc/sudoers</SPAN> 中</PRE>
<UL style="list-style-type: none; page-break-inside: avoid;">
  <LI><CODE>users</CODE> 一个或多个用户或是%用户组(像 %wheel) 来获得权限</LI>
  <LI><CODE>hosts</CODE> 主机列表(或 ALL)</LI>
  <LI><CODE>runas</CODE> 列出用户以何种身份(或 ALL)来执行命令，放在 ( ) 内！</LI>
  <LI><CODE>commands</CODE> 列出可被 users 以 runas 或 root 权限运行的命令(或 
ALL)</LI></UL>另外一些关键字可以定义别名，他们是 User_Alias, Host_Alias, Runas_Alias 和 
Cmnd_Alias。这对于一些较大的设置比较有用。下面是 sudoers 例子： 
<PRE># cat /etc/sudoers
<SPAN class="cmt"># 主机别名</SPAN>
Host_Alias   DMZ     = 212.118.81.40/28
Host_Alias   DESKTOP = work1, work2

<SPAN class="cmt"># 用户别名 和 runas 别名</SPAN>
User_Alias   ADMINS  = colin, luca, admin
User_Alias   DEVEL   = joe, jack, julia
Runas_Alias  DBA     = oracle,pgsql

<SPAN class="cmt"># 命令别名，其值为全路径命令</SPAN>
Cmnd_Alias   SYSTEM  = /sbin/reboot,/usr/bin/kill,/sbin/halt,/sbin/shutdown,/etc/init.d/
Cmnd_Alias   PW      = /usr/bin/passwd [A-z]*, !/usr/bin/passwd root <SPAN class="cmt"># Not root pwd!</SPAN>
Cmnd_Alias   DEBUG   = /usr/sbin/tcpdump,/usr/bin/wireshark,/usr/bin/nmap
</PRE>
<PRE><SPAN class="cmt"># 一个真实的规则</SPAN>
root,ADMINS  ALL     = (ALL) NOPASSWD: ALL    <SPAN class="cmt"># ADMINS 别名中的用户可做任何事情不需要密码</SPAN>
DEVEL        DESKTOP = (ALL) NOPASSWD: ALL    <SPAN class="cmt"># 开发人员可在 DESKTOP 别名的主机上做任何事情</SPAN>
DEVEL        DMZ     = (ALL) NOPASSWD: DEBUG  <SPAN class="cmt"># 开发人员可以在 DMZ 别名的主机上使用 DEBUG 别名中的命令</SPAN>

<SPAN class="cmt"># 用户 sysadmin 可以在 DMZ 服务器上执行一些命令</SPAN>
sysadmin     DMZ     = (ALL) NOPASSWD: SYSTEM,PW,DEBUG
sysadmin     ALL,!DMZ = (ALL) NOPASSWD: ALL   <SPAN class="cmt"># 可以在非 DMZ 主机上做任何事情</SPAN>
%dba         ALL     = (DBA) ALL              <SPAN class="cmt"># 用户组 dba 可以运行 DBA 别名中用户权限的所有命令</SPAN>

<SPAN class="cmt"># 所有用户可以在 DESKTOP 别名的主机上 挂载/卸载 CD-ROM</SPAN>
ALL          DESKTOP = NOPASSWD: /sbin/mount /cdrom,/sbin/umount /cdrom
</PRE></DIV>
<DIV id="crypt">
<H1><A>文件加密</A></H1>
<H2>单个文件</H2>加密和解密： 
<PRE># openssl des -salt -in file -out file.des
# openssl des -d -salt -in file.des -out file
</PRE>那个 
file 可以是归档文件(tar archive)。     
<H2>归档并加密整个目录</H2>
<PRE># tar -cf - directory | openssl des -salt -out directory.tar.des      <SPAN class="cmt"># 加密</SPAN>
# openssl des -d -salt -in directory.tar.des | tar -x                 <SPAN class="cmt"># 解密</SPAN>
</PRE>
<H2>压缩归档并加密整个目录</H2>
<PRE># tar -zcf - directory | openssl des -salt -out directory.tar.gz.des  <SPAN class="cmt"># 加密</SPAN>
# openssl des -d -salt -in directory.tar.gz.des | tar -xz             <SPAN class="cmt"># 解密</SPAN>
</PRE>
<UL>
  <LI>在使用-k mysecretpassword后，des会取消交互式的密码请求。不过，这非常不安全。</LI>
  <LI>使用des3代替des来获得更强的加密(Triple-DES Cipher)。这同样会消耗更多的CPU。</LI></UL>
<H2>GPG</H2><A href="http://gnupg.org/">GnuPG</A> 
是众所周知的对邮件或任何数据进行加密和签名的软件。此外，gpg 
还提供高级密钥管理系统。此章节只涵盖了文件加密，没有邮件加密、签名或者信任网络(Web-Of-Trust)。<BR>
单纯的加密是一个对称式的加密算法(symmetric 
cipher)。在本例中，文件是用一个秘密来加密的，任何人知道了这个密码都可以对其进行解密，因此就不需要密钥。Gpg 添加后缀 ".gpg" 到已加密的文件名。 
<PRE># gpg -c file                        <SPAN class="cmt"># 使用密码加密文件</SPAN>
# gpg file.gpg                       <SPAN class="cmt"># 文件解密(选项 -o 其他文件)</SPAN>
</PRE>
<H3>使用密钥</H3>对于更详细的请看 <A href="http://www.madboa.com/geek/gpg-quickstart">GPG 
快速上手</A><SPAN class="fn">http://www.madboa.com/geek/gpg-quickstart</SPAN> 和 <A 
href="http://aplawrence.com/Basics/gpg.html">GPG/PGP 基础</A><SPAN 
class="fn">http://aplawrence.com/Basics/gpg.html</SPAN>，特别是 <A href="http://gnupg.org/documentation">gnupg 
文档</A><SPAN class="fn">http://gnupg.org/documentation</SPAN>。<BR>
密钥对(私钥，公钥)为非对称加密技术。 要点如下： 
<UL>
  <LI>你的公钥是用来给<I>别人</I>加密文件的并且只有你作为接收者才可以解密(甚至不是一个人加密的文件也可以解密)。公钥是公开的也就意味着可以分发。</LI>
  <LI>用你的密码加密的私钥用来解密用<I>你的</I>公钥加密的文件。这个密钥必须保持<I>安全</I>。因为如果遗失了私钥或者密码，那么所有的文件都是使用你的公钥加密的。</LI>
  <LI>多个密钥文件被称为密钥环(keyrings)，她可以包含一个以上的密钥。</LI></UL>
首先生成密钥对。使用默认就行，但你至少要输入你的全名、邮件地址和可选注释。该注释对于创建相同的名字和邮件地址的多个密钥来说非常有用。此外，你应该使用"口令(passphrase)"，而不是简单的密码。 
<PRE># gpg --gen-key                      <SPAN class="cmt"># 这需要一些时间</SPAN></PRE>
在 Unix 上密钥存储在 ~/.gnupg/ 中，在 Windows 上通常存储在<BR>C:/Documents and 
Settings/%USERNAME%/Application Data/gnupg/ 中。 
<PRE>~/.gnupg/pubring.gpg                 <SPAN class="cmt"># 包含你的公钥和所有其他导入的信息</SPAN>
~/.gnupg/secring.gpg                 <SPAN class="cmt"># 可包含多个私钥</SPAN>
</PRE>
常用选项的简短描述： 
<UL style="list-style-type: none; page-break-inside: avoid;">
  <LI><B>-e</B> 加密数据</LI>
  <LI><B>-d</B> 解密数据</LI>
  <LI><B>-r</B> 为某个收件者加密('全名' 或者 'email@domain')</LI>
  <LI><B>-a</B> 输出经过 ascii 封装的密钥</LI>
  <LI><B>-o</B> 指定输出文件</LI></UL>本实例使用'Your Name' 和 'Alice' 作为密钥的 email 或 全名 或 
部分名字的参考。举个例子，我可以使用 'Colin' or 'c@cb.vu' 给我的密钥 [Colin Barschel (cb.vu) 
&lt;c@cb.vu&gt;]。 
<H3>只用于个人的加密</H3>不需要导出/导入任何密钥，因为你都已经有了。 
<PRE># gpg -e -r 'Your Name' file                  <SPAN class="cmt"># 使用你的公钥加密</SPAN>
# gpg -o file -d file.gpg                     <SPAN class="cmt"># 解密。使用 -o 指定输出文件</SPAN>
</PRE>
<H3>用密钥加密-解密</H3>首先你需要导出给别人使用的公钥。并且你需要导入来自 Alice 她所加密文件的公钥。你可以用简单的 ascii 
文档或者使用公钥服务器来保存这些密钥。<BR>举个例子，Alice 导出她的公钥，然后你导入它，之后你就可以加密一个文件给她。这个加密文件只有 Alice 
可以解密。 
<PRE># gpg -a -o alicekey.asc --export 'Alice'               <SPAN class="cmt"># Alice 导出她的公钥到 ascii 文件中</SPAN>
# gpg --send-keys --keyserver subkeys.pgp.net KEYID     <SPAN class="cmt"># Alice 把她的公钥放入一个服务器</SPAN>
# gpg --import alicekey.asc                             <SPAN class="cmt"># 你导入她的密钥到你的公钥环(pubring)中</SPAN>
# gpg --search-keys --keyserver subkeys.pgp.net 'Alice' <SPAN class="cmt"># 或者从一个服务器中获取他的公钥</SPAN>
</PRE>
一旦这些公钥导入后，加密或解密一个文件会非常简单： 
<PRE># gpg -e -r 'Alice' file                      <SPAN class="cmt"># 给 Alice 加密文件</SPAN>
# gpg -d file.gpg -o file                     <SPAN class="cmt"># 解密 Alice 给你的加密文件</SPAN>
</PRE>
<H3>密钥管理</H3>
<PRE># gpg --list-keys                             <SPAN class="cmt"># 列出所有公钥并查看其 KEYID</SPAN>
    <SPAN class="cmt">KEYID 跟在 '/' 后面 比如：pub   1024D/D12B77CE 它的 KEYID 是 D12B77CE</SPAN>
# gpg --gen-revoke 'Your Name'                <SPAN class="cmt"># 产生一份撤销密钥证书</SPAN>
# gpg --list-secret-keys                      <SPAN class="cmt"># 列出所有私钥</SPAN>
# gpg --delete-keys NAME                      <SPAN class="cmt"># 从本的密钥环中删除一个公钥</SPAN>
# gpg --delete-secret-key NAME                <SPAN class="cmt"># 从本的密钥环中删除一个私钥</SPAN>
# gpg --fingerprint KEYID                     <SPAN class="cmt"># 显示 KIYID 这个密钥的指纹</SPAN>
# gpg --edit-key KEYID                        <SPAN class="cmt"># 编辑密钥(比如签名或者添加/删除 email)</SPAN>
</PRE></DIV>
<DIV id="cryptpart">
<H1><A>分区加密</A></H1>
<P class="xrefp"><A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#wluks">Linux 
with LUKS</A> | <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#woluks">Linux 
dm-crypt only</A> | <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#bsdgeli">FreeBSD 
GELI</A> | <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#bsdpwd">FreeBSD 
只使用密码</A></P>
有(许多)其他替代方法来加密磁盘，我只呈现我所知道和使用的方法。请记住，安全只是系统还未经过实际考验而已。入侵者可以轻易通过键盘事件记录密码。此外，当已经加载了分区，其数据是可以自由访问的，并不会阻止入侵者去访问它。 
<H2 id="dm-crypt">Linux</H2>这部分我们使用可用于 2.6 内核的 Linux dm-crypt 
(device-mapper)。在这个实例中，让我们加密 <CODE>/dev/sdc1</CODE> 分区，它可为任何其他分区、磁盘、USB或者用 
<CODE>losetup</CODE> 创建的基于文件的分区。对于基于文件的分区，我们使用 <CODE>/dev/loop0</CODE>。看 <A 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#losetup">镜像文件分区</A>。Device 
mapper 利用标签来标识一个分区。我们使用 <CODE>sdc1</CODE> 作为此标签，但可以为任何字符串。 
<H3 id="wluks">dm-crypt with LUKS</H3>LUKS 和 dm-crypt 
是较好的加密技术，并且可为同一个分区设置多个口令，更改密码也很方便。可简单输入 <CODE># cryptsetup --help</CODE> 来测试 
LUKS 是否可用。如果没有显示任何关于 LUKS 的信息，可看下面<A href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#woluks">Without 
LUKS</A> 的介绍。第一步如果需要的话创建一个分区：<CODE>fdisk /dev/sdc</CODE>。 
<H4>创建加密分区</H4>
<PRE># dd if=/dev/urandom of=/dev/sdc1          <SPAN class="cmt"># 可选</SPAN>
# cryptsetup -y luksFormat /dev/sdc1       <SPAN class="cmt"># 这破坏了在 sdc1 上的数据</SPAN>
# cryptsetup luksOpen /dev/sdc1 sdc1
# mkfs.ext3 /dev/mapper/sdc1               <SPAN class="cmt"># 创建 ext3 文件系统</SPAN>
# mount -t ext3 /dev/mapper/sdc1 /mnt
# umount /mnt
# cryptsetup luksClose sdc1                <SPAN class="cmt"># Detach 已加密的分区</SPAN></PRE>
<H4>Attach</H4>
<PRE># cryptsetup luksOpen /dev/sdc1 sdc1
# mount -t ext3 /dev/mapper/sdc1 /mnt</PRE>
<H4>Detach</H4>
<PRE># umount /mnt
# cryptsetup luksClose sdc1
</PRE>
<H3 id="woluks">dm-crypt without LUKS</H3>
<PRE># cryptsetup -y create sdc1 /dev/sdc1      <SPAN class="cmt"># 或任何其他分区像 /dev/loop0</SPAN>
# dmsetup ls                               <SPAN class="cmt"># 检查一下，将显示：sdc1 (254, 0)</SPAN>
# mkfs.ext3 /dev/mapper/sdc1               <SPAN class="cmt"># 只有第一次要这么做！</SPAN>
# mount -t ext3 /dev/mapper/sdc1 /mnt
# umount /mnt/
# cryptsetup remove sdc1                   <SPAN class="cmt"># Detach 已加密的分区</SPAN>
</PRE>
这样做等同于(非 mkfs 部分) re-attach 分区。如果密码不正确，mount 命令将会失败。对于这个例子，只要简单的移除 sdc1 
(<CODE>cryptsetup remove sdc1</CODE>)并重建即可。 
<H2 id="bsdgeli">FreeBSD</H2>两个流行的 FreeBSD 磁盘加密模块为 <CODE>gbde</CODE> 和 
<CODE>geli</CODE>。我现在使用 <CODE>geli</CODE> 原因是它够快并且它使用加解密硬件加速设备。详情可看 <A href="http://www.freebsd.org/handbook/disks-encrypting.html">FreeBSD 
使用手册 18.6</A><SPAN 
class="fn">http://www.freebsd.org/handbook/disks-encrypting.html</SPAN>。<CODE>geli</CODE> 
模块必须已编译或加载进内核： 
<PRE>options GEOM_ELI
device crypto                                       <SPAN class="cmt"># 内核配置文件中加入这两行</SPAN>
# echo 'geom_eli_load="YES"' &gt;&gt; /boot/loader.conf   <SPAN class="cmt"># 也可以在系统引导时加载或者做：kldload geom_eli</SPAN>
</PRE>
<H3>使用密码和密钥</H3>我为一个典型的磁盘加密使用这些设置，其使用了一个口令和一个加密主密钥(master 
key)的密钥。这意味着你需要密码和生产的密钥 <CODE>/root/ad1.key</CODE> 来 attach 
分区。主密钥存储在这个加密分区中并且不可见。看下面为 USB 或 映像文件的加密设置。 
<H4>创建加密分区</H4>
<PRE># dd if=/dev/random of=/root/ad1.key bs=64 count=1  <SPAN class="cmt"># 加密主密钥的密钥</SPAN>
# geli init -s 4096 -K /root/ad1.key /dev/ad1       <SPAN class="cmt"># 对于磁盘也可用 -s 8192</SPAN>
# geli attach -k /root/ad1.key /dev/ad1             <SPAN class="cmt"># 将 /dev/ad1 与所生成的密钥 /root/ad1.key 关联</SPAN>
# dd if=/dev/random of=/dev/ad1.eli bs=1m           <SPAN class="cmt"># 可选，需要很长时间</SPAN>
# newfs /dev/ad1.eli                                <SPAN class="cmt"># 创建文件系统</SPAN>
# mount /dev/ad1.eli /mnt
</PRE>
<H4>Attach</H4>
<PRE># geli attach -k /root/ad1.key /dev/ad1
# fsck -ny -t ffs /dev/ad1.eli                      <SPAN class="cmt"># 检查文件系统</SPAN>
# mount /dev/ad1.eli /mnt
</PRE>
<H4>Detach</H4>Detach 步骤会在关机时自动完成。 
<PRE># umount /mnt
# geli detach /dev/ad1.eli
</PRE>
<H4>/etc/fstab</H4>加密分区在 /etc/fstab 中配置成自动加载。系统启动时会询问加密分区的密码。对于本例下列设置是必须的： 
<PRE># grep geli /etc/rc.conf
geli_devices="ad1"
geli_ad1_flags="-k /root/ad1.key"
# grep geli /etc/fstab
/dev/ad1.eli         /home/private              ufs             rw      0       0
</PRE>
<H3 id="bsdpwd">仅用密码</H3>加密一个 USB stick 
或者映像文件使用密码而不是密钥来得更方便。这种情况下，没有必要随身携带额外的密钥文件。所做步骤同上面非常相似，只是不需要密钥文件。让我们来加密一个 1 GB 
的映像文件<CODE>/cryptedfile</CODE>。 
<PRE># dd if=/dev/zero of=/cryptedfile bs=1M count=1000  <SPAN class="cmt"># 1 GB 文件</SPAN>
# mdconfig -at vnode -f /cryptedfile
# geli init /dev/md0                                <SPAN class="cmt"># 仅用密码加密</SPAN>
# geli attach /dev/md0
# newfs -U -m 0 /dev/md0.eli
# mount /dev/md0.eli /mnt
# umount /dev/md0.eli
# geli detach md0.eli
</PRE>现在可以把这个映像文件加载成仅需密码的文件系统。 
<PRE># mdconfig -at vnode -f /cryptedfile
# geli attach /dev/md0
# mount /dev/md0.eli /mnt
</PRE></DIV>
<DIV id="certs">
<H1><A>SSL 认证</A></H1>所谓的 SSL/TLS 
认证是加密的公钥认证，它由一个公用密钥和私用密钥组成。证书用来认证终端和加密数据的。例如，用在 web 服务器(https)或者邮件服务器(imaps)。 
<H2>步骤</H2>
<UL>
  <LI>我们需要一个证书颁发机构来签署我们的证书。这一步通常由供应商提供，如 Thawte、Verisign等。不过，我们也可以创建我们自己的。</LI>
  <LI>创建一个证书签发申请(signing 
  request)。这个申请需要一个已经包含所有必需的信息的未签署证书(公共部分)。该证书申请通常发送到认证供应商去签署。这一步同样也在本地机器上创建了私钥。</LI>
  <LI>证书颁发机构签署证书。</LI>
  <LI>如果有需要，加入证书和密钥到单个文件来给应用程序使用(web 服务器、邮件服务器等）。</LI></UL>
<H2>配置 OpenSSL</H2>我们使用 /usr/local/certs 作为这个例子的目录或者根据你的设置相应的编辑 
/etc/ssl/openssl.cnf 文件，因此你知道文件将创建在哪里。以下是 openssl.cnf 的相关部分： 
<PRE>[ CA_default ]
dir             = /usr/local/certs/CA       <SPAN class="cmt"># 保存所有信息的文件夹</SPAN>
certs           = $dir/certs                <SPAN class="cmt"># 已生成证书的默认保存目录</SPAN>
crl_dir         = $dir/crl                  <SPAN class="cmt"># 生成的证书撤销列表(CRL)的默认保存目录</SPAN>
database        = $dir/index.txt            <SPAN class="cmt"># 保存已签发证书的文本数据库文件</SPAN>
</PRE>
确保所有目录已经创建 
<PRE># mkdir -p /usr/local/certs/CA
# cd /usr/local/certs/CA
# mkdir certs crl newcerts private
# echo "01" &gt; serial                        <SPAN class="cmt"># 仅当 serial 不存在时</SPAN>
# touch index.txt
</PRE>
<H2 id="createca">创建一个认证授权</H2>
如果你没有来自供应商的认证授权，你必须创建你自己的。如果打算去供应商签署申请，那么这个步骤不是必须的。创建认证授权 (CA)： 
<PRE># openssl req -new -x509 -days 730 -config /etc/ssl/openssl.cnf \
-keyout CA/private/cakey.pem -out CA/cacert.pem
</PRE>
<H2 id="createreq">创建证书签发申请</H2>要创建一个新证书(比如给邮件服务器或 web 
服务器)，首先用其私钥创建证书申请。如果你的应用程序不支持加密的私钥(比如  UW-IMAP 就不支持)，那么就用 <CODE>-nodes</CODE> 
来禁用加密。 
<PRE># openssl req -new -keyout newkey.pem -out newreq.pem \
-config /etc/ssl/openssl.cnf
# openssl req -nodes -new -keyout newkey.pem -out newreq.pem \
-config /etc/ssl/openssl.cnf                <SPAN class="cmt"># 不对这个密钥加密</SPAN>
</PRE>
<H2 id="signcert">签署证书</H2>该证书申请由 CA 签发确认，这个步骤通常由供应商完成。<I>注意：在下面命令中替换 
"servername" 成你的服务器名称</I>。 
<PRE># cat newreq.pem newkey.pem &gt; new.pem
# openssl ca -policy policy_anything -out servernamecert.pem \
-config /etc/ssl/openssl.cnf -infiles new.pem
# mv newkey.pem servernamekey.pem
</PRE>现在，servernamekey.pem 
就是私钥，servernamecert.pem 就为服务器的证书。 
<H2>创建联合认证(united certificate)</H2>IMAP 
服务器想要私钥和服务器证书在同一个文件中。通常，这还是比较容易处理的，但是该文件要保证安全! Apache 也可以处理好它。创建一个包含证书和密钥的文件 
servername.pem 。 
<UL>
  <LI>用文本编辑器打开私钥文件(servernamekey.pem)，并拷贝私钥到 "servername.pem" 文件中去。</LI>
  <LI>服务器证书(servernamecert.pem)也做同样的动作。</LI></UL>最后 servername.pem 
文件应该看起来像这样：<BR><BR>
<PRE>-----BEGIN RSA PRIVATE KEY-----
MIICXQIBAAKBgQDutWy+o/XZ/[...]qK5LqQgT3c9dU6fcR+WuSs6aejdEDDqBRQ
-----END RSA PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
MIIERzCCA7CgAwIBAgIBBDANB[...]iG9w0BAQQFADCBxTELMAkGA1UEBhMCREUx
-----END CERTIFICATE-----
</PRE>现在我们的 
/usr/local/certs/ 目录中有了这些； 
<UL style="list-style-type: none;">
  <LI>CA/private/cakey.pem <I>(CA 服务器私钥)</I></LI>
  <LI>CA/cacert.pem <I>(CA 服务器公钥)</I></LI>
  <LI>certs/servernamekey.pem <I>(服务器私钥)</I></LI>
  <LI>certs/servernamecert.pem <I>(服务器已签署的证书)</I></LI>
  <LI>certs/servername.pem <I>(私钥和服务器证书)</I></LI></UL>要保证私钥的安全! 
<H2 id="viewcert">查看证书信息</H2>要查看证书信息，只要这么做： 
<PRE># openssl x509 -text -in servernamecert.pem      <SPAN class="cmt"># 显示证书信息</SPAN>
# openssl req -noout -text -in server.csr        <SPAN class="cmt"># 显示申请信息</SPAN>
# openssl s_client -connect cb.vu:443            <SPAN class="cmt"># 检查 web 服务器认证信息</SPAN>
</PRE></DIV>
<DIV id="cvs">
<H1><A>CVS</A></H1>
<P class="xrefp"><A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#cvssetup">服务器设置</A> 
| <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#cvstest">CVS 
测试</A> | <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#cvsssh">SSH 
隧道</A> | <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#cvsusage">CVS 
使用</A></P>
<H2 id="cvssetup">服务器设置</H2>
<H3>CVS 环境初始化</H3>决定主 repository 将要创建和重置的 cvs 根目录。比如 /usr/local/cvs (根)： 
<PRE># mkdir -p /usr/local/cvs
# setenv CVSROOT /usr/local/cvs      <SPAN class="cmt"># 设置 CVSROOT 环境变量(本地)</SPAN>
# cvs init                           <SPAN class="cmt"># 创建所有初始化 CVS 配置文件</SPAN>
# cd /root
# cvs checkout CVSROOT               <SPAN class="cmt"># 签出配置文件来修改他们</SPAN>
# cd CVSROOT
edit config ( fine as it is)
# cvs commit config
cat &gt;&gt; writers                       <SPAN class="cmt"># 创建 writers 文件 (也可为 readers)</SPAN>
colin
^D                                   <SPAN class="cmt"># 使用 [Control][D] 退出编辑</SPAN>
# cvs add writers                    <SPAN class="cmt"># 添加文件 writers 进 repository</SPAN>
# cvs edit checkoutlist
# cat &gt;&gt; checkoutlist
writers
^D                                   <SPAN class="cmt"># 使用 [Control][D] 退出编辑</SPAN>
# cvs commit                         <SPAN class="cmt"># 提交所有配置更改</SPAN>
</PRE>
添加一个 <STRONG>readers</STRONG> 文件，如果你要区分读写权限的话。<I>注意：</I> 不要在主 cvs 
中直接编辑文件，而应该签出要编辑的文件，修改完成后再签入。我们所做的文件 <STRONG>writers</STRONG> 用来定义可写权限。<BR>
下面有三种流行的方式去访问 CVS。前两个不需要任何进一步的配置。看 <A href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#cvsroot">CVSROOT</A> 
部分的实例了解如何使用它们： 
<UL>
  <LI>直接本的访问文件系统。用户需要有足够的权限来直接访问 CVS，除了要登录到操作系统，没有进一步的验证。然而这仅对本地 repository 
  才有用。</LI>
  <LI>使用 ext 协议通过 ssh 来远程访问。任何有 ssh shell 账户和在 CVS 服务器上可读写权限的都可直接使用 ext 协议通过 ssh 
  来访问 CVS，而不需要任何额外的隧道。没有服务器来处理运行在 CVS 上的验证工作。ssh 登录会去验证。</LI>
  <LI>用 pserver 来远程访问。这是对于有较大用户量的首选方法，用户由 CVS 的 pserver 
  通过一个专门的密码数据库来验证，因此不需要本地用户帐户。这种设置在下面会有说明。</LI></UL>
<H3>用 inetd 设置网络</H3>如果不需要网络访问，CVS 可以运行于本地。对于远程访问，在 /etc/inetd.conf (Suse 为 
/etc/xinetd.d/cvs)中配置如下行，可让守护进程 inetd 启动 pserver： 
<PRE>cvspserver	stream  tcp  nowait  cvs  /usr/bin/cvs	cvs \
--allow-root=/usr/local/cvs pserver
</PRE>这是个用来阻断从 
internet 访问 cvs 端口的好方法，可使用 ssh 隧道来远程的访问 repository。 
<H3>单独认证</H3>CVS 用户可能不是操作系统的一部分(即不是本地用户)。这其实可从安全的角度去看。简单的添加一个叫 
<STRONG>passwd</STRONG> (in the CVSROOT directory) 的文件，其包含 crypt 
格式的用户登录名和密码。这也可以使用 apache 的 htpasswd 工具来完成。<BR><I>注意：</I>这个 passwd 文件仅仅是文件，可以在 
CVSROOT 中直接编辑。它不能被签出。更多信息请用 htpasswd --help 
<PRE># htpasswd -cb passwd user1 password1  <SPAN class="cmt"># -c 创建文件</SPAN>
# htpasswd -b passwd user2 password2
</PRE>现在添加 
<CODE>:cvs</CODE> 到每行的结尾处，用来告诉 cvs 服务器更改用户到 cvs (或任何你正在运行的 cvs 服务器下)。它看起来像这样： 
<PRE># cat passwd
user1:xsFjhU22u8Fuo:cvs
user2:vnefJOsnnvToM:cvs
</PRE>
<H2 id="cvstest">测试它</H2>测试作为一般用户登录(比如我) 
<PRE># cvs -d :pserver:colin@192.168.50.254:/usr/local/cvs login
Logging in to :pserver:colin@192.168.50.254:2401/usr/local/cvs
CVS password:

</PRE>
<H3 id="cvsroot">CVSROOT 变量</H3>这是个环境变量用来指定 repository 的位置。对于本地使用，该变量只需设置成 
repository 的目录。对于通过网络使用，传输协议必须指定。使用 <CODE>setenv CVSROOT string</CODE> (csh, 
tcsh shell) 或者 <CODE>export CVSROOT=string</CODE> ( sh, bash shell) 设置 CVSROOT 
环境变量。 
<PRE># setenv CVSROOT :pserver:&lt;username&gt;@&lt;host&gt;:/cvsdirectory
<I><SPAN class="cmt">For example:</SPAN></I>
# setenv CVSROOT /usr/local/cvs                               <SPAN class="cmt"># 仅限本的使用</SPAN>
# setenv CVSROOT :local:/usr/local/cvs                        <SPAN class="cmt"># 同上</SPAN>
# setenv CVSROOT :ext:user@cvsserver:/usr/local/cvs           <SPAN class="cmt"># 通过 SSH 直接访问</SPAN>
# setenv CVS_RSH ssh                                          <SPAN class="cmt"># ext 协议访问</SPAN>
# setenv CVSROOT :pserver:user@cvsserver.254:/usr/local/cvs   <SPAN class="cmt"># 通过 pserver 网络访问</SPAN>
</PRE>
一旦登录成功就可导入一个新项目进 repository：<STRONG>cd 进入</STRONG>你的项目根目录 
<PRE>cvs import &lt;module name&gt; &lt;vendor tag&gt; &lt;initial tag&gt;
cvs -d :pserver:colin@192.168.50.254:/usr/local/cvs import MyProject MyCompany START
</PRE>在 
repository 中有个名叫 MyProject 新项目(之后用来签出)。CVS 会导入当前目录的内容进新项目。<BR><BR>签出： 
<PRE># cvs -d :pserver:colin@192.168.50.254:/usr/local/cvs checkout MyProject
<I><SPAN class="cmt">或者</SPAN></I>
# setenv CVSROOT :pserver:colin@192.168.50.254:/usr/local/cvs
# cvs checkout MyProject
</PRE>
<H2 id="cvsssh">通过 SSH 隧道访问 CVS</H2>我们需要两个 shell 来做这个。在第一个 shell 中，我们连接到 cvs 
服务器并对 cvs 连接进行端口转发(port-forward)。在第二个 shell 中，我们就像在本地一样使用 cvs。 <BR>在 shell 1: 
<PRE># ssh -L2401:localhost:2401 colin@cvs_server   <SPAN class="cmt"># 直接连接到 cvs 服务器。或：</SPAN>
# ssh -L2401:cvs_server:2401 colin@gateway     <SPAN class="cmt"># 使用一个网关间接连接到 cvs 服务器</SPAN></PRE>
在 shell 2: 
<PRE># setenv CVSROOT :pserver:colin@localhost:/usr/local/cvs
# cvs login
Logging in to :pserver:colin@localhost:2401/usr/local/cvs
CVS password:
# cvs checkout MyProject/src
</PRE>
<H2 id="cvsusage">CVS 命令及其使用</H2>
<H3>导入</H3>该 import 命令用来添加整个目录，它必须运行于要导入的目录中。比如，目录 /devel/ 包含的所有文件和子目录要导入。该目录名在 
CVS 中(模块)将会称为 "myapp"。 
<PRE># cvs import [options] directory-name vendor-tag release-tag
# cd /devel                          <SPAN class="cmt"># 必须在该目录中来导入</SPAN>
# cvs import myapp Company R1_0      <SPAN class="cmt"># 修订(release)标签可以为任何单个单词</SPAN>
</PRE>
在添加了一个新目录 "/devel/tools/" 后，也可这么导入。 
<PRE># cd /devel/tools
# cvs import myapp/tools Company R1_0
</PRE>
<H3>签出、更新和提交</H3>
<PRE># cvs co myapp/tools                 <SPAN class="cmt"># 仅会签出 tools 目录</SPAN>
# cvs co -r R1_1 myapp               <SPAN class="cmt"># 签出修订版本为 R1_1 的 myapp (sticky)</SPAN>
# cvs -q -d update -P                <SPAN class="cmt"># 典型的 CVS 更新</SPAN>
# cvs update -A                      <SPAN class="cmt"># 重置所有 sticky 标签(或日期、选项)</SPAN>
# cvs add newfile                    <SPAN class="cmt"># 添加一个新文件</SPAN>
# cvs add -kb newfile                <SPAN class="cmt"># 添加一个二进制文件</SPAN>
# cvs commit file1 file2             <SPAN class="cmt"># 仅提交这两个文件</SPAN>
# cvs commit -m "message"            <SPAN class="cmt"># 提交所有更改并为这个更改添加日志消息</SPAN>
</PRE>
<H3>创建一个 patch</H3>It is best to create and apply a patch from the working 
development directory related to the project, or from within the source 
directory. 
<PRE># cd /devel/project
# diff -Naur olddir newdir &gt; patchfile <SPAN class="cmt"># Create a patch from a directory or a file</SPAN>
# diff -Naur oldfile newfile &gt; patchfile
</PRE>
<H3>应用一个 patch</H3>Sometimes it is necessary to strip a directory level from the 
patch, depending how it was created. In case of difficulties, simply look at the 
first lines of the patch and try -p0, -p1 or -p2. 
<PRE># cd /devel/project
# patch --dry-run -p0 &lt; patchfile    <SPAN class="cmt"># Test the path without applying it</SPAN>
# patch -p0 &lt; patchfile
# patch -p1 &lt; patchfile              <SPAN class="cmt"># strip off the 1st level from the path</SPAN>
</PRE></DIV>
<DIV id="svn">
<H1><A>SVN</A></H1>
<P class="xrefp"><A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#svnsetup">Server 
setup</A> | <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#svnssh">SVN+SSH</A> 
| <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#svnhttp">SVN 
over http</A> | <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#svnusage">SVN 
usage</A></P><A href="http://subversion.tigris.org/">Subversion (SVN)</A><SPAN 
class="fn">http://subversion.tigris.org/</SPAN> is a version control system 
designed to be the successor of CVS (Concurrent Versions System). The concept is 
similar to CVS, but many shortcomings where improved. See also the <A href="http://svnbook.red-bean.com/en/1.4/">SVN 
book</A><SPAN class="fn">http://svnbook.red-bean.com/en/1.4/</SPAN>. 
<H2 id="svnsetup">Server setup</H2>The initiation of the repository is fairly 
simple (here for example <CODE>/home/svn/</CODE> must exist): 
<PRE># svnadmin create --fs-type fsfs /home/svn/project1</PRE>Now the access to 
the repository is made possible with: 
<UL>
  <LI><CODE>file://</CODE> Direct file system access with the svn client with. 
  This requires local permissions on the file system.</LI>
  <LI><CODE>svn://</CODE> or <CODE>svn+ssh://</CODE> Remote access with the 
  svnserve server (also over SSH). This requires local permissions on the file 
  system.</LI>
  <LI><CODE>http://</CODE> Remote access with webdav using apache. No local 
  users are necessary for this method.</LI></UL>Using the local file system, it is 
now possible to import and then check out an existing project. Unlike with CVS 
it is not necessary to cd into the project directory, simply give the full path: 
<PRE># svn import /project1/ file:///home/svn/project1/trunk -m 'Initial import'
# svn checkout file:///home/svn/project1
</PRE>
The new directory "trunk" is only a convention, this is not required. 
<H3 id="svnssh">Remote access with ssh</H3>No special setup is required to 
access the repository via ssh, simply replace <CODE>file://</CODE> with 
<CODE>svn+ssh/hostname</CODE>. For example: 
<PRE># svn checkout svn+ssh://hostname/home/svn/project1</PRE>As with the local 
file access, every user needs an ssh access to the server (with a local account) 
and also read/write access. This method might be suitable for a small group. All 
users could belong to a subversion group which owns the repository, for example: 
<PRE># groupadd subversion
# groupmod -A user1 subversion
# chown -R root:subversion /home/svn
# chmod -R 770 /home/svn
</PRE>
<H3 id="svnhttp">Remote access with http (apache)</H3>Remote access over http 
(https) is the only good solution for a larger user group. This method uses the 
apache authentication, not the local accounts. This is a typical but small 
apache configuration: 
<PRE>LoadModule dav_module         modules/mod_dav.so
LoadModule dav_svn_module     modules/mod_dav_svn.so
LoadModule authz_svn_module   modules/mod_authz_svn.so   <SPAN class="cmt"> # Only for access control</SPAN>
</PRE>
<PRE style="page-break-inside: avoid;">&lt;Location /svn&gt;
  DAV svn
  <SPAN class="cmt"># any "/svn/foo" URL will map to a repository /home/svn/foo</SPAN>
  SVNParentPath /home/svn
  AuthType Basic
  AuthName "Subversion repository"
  AuthzSVNAccessFile /etc/apache2/svn.acl
  AuthUserFile /etc/apache2/svn-passwd
  Require valid-user
&lt;/Location&gt;
</PRE>
The apache server needs full access to the repository: 
<PRE># chown -R www:www /home/svn</PRE>Create a user with htpasswd2: 
<PRE># htpasswd -c /etc/svn-passwd user1 <SPAN class="cmt"> # -c creates the file</SPAN></PRE>
<H4>Access control svn.acl example</H4>
<PRE><SPAN class="cmt"># Default it read access. "* =" would be default no access</SPAN>
[/]
* = r
[groups]
project1-developers = joe, jack, jane
<SPAN class="cmt"># Give write access to the developers</SPAN>
[project1:]
@project1-developers = rw
</PRE>
<H2 id="svnusage">SVN commands and usage</H2>See also the <A href="http://www.cs.put.poznan.pl/csobaniec/Papers/svn-refcard.pdf" 
rel="nofollow">Subversion Quick Reference Card</A><SPAN 
class="fn">http://www.cs.put.poznan.pl/csobaniec/Papers/svn-refcard.pdf</SPAN>. 
<A href="http://tortoisesvn.tigris.org/">Tortoise SVN</A><SPAN 
class="fn">http://tortoisesvn.tigris.org</SPAN> is a nice Windows interface. 
<H3 id="svnimport">Import</H3>A new project, that is a directory with some 
files, is imported into the repository with the <CODE>import</CODE> command. 
Import is also used to add a directory with its content to an existing project. 
<PRE># svn help import                               <SPAN class="cmt"> # Get help for any command</SPAN>
<SPAN class="cmt">    # Add a new directory (with content) into the src dir on project1</SPAN>
# svn import /project1/newdir http://host.url/svn/project1/trunk/src -m 'add newdir'
</PRE>
<H3 id="svntypical">Typical SVN commands</H3>
<PRE># svn co http://host.url/svn/project1/trunk     <SPAN class="cmt"> # Checkout the most recent version</SPAN>
<SPAN class="cmt">    # Tags and branches are created by copying</SPAN>
# svn mkdir http://host.url/svn/project1/tags/  <SPAN class="cmt"> # Create the tags directory</SPAN>
# svn copy -m "Tag rc1 rel." http://host.url/svn/project1/trunk \
                             http://host.url/svn/project1/tags/1.0rc1
# svn status [--verbose]                        <SPAN class="cmt"> # Check files status into working dir</SPAN>
# svn add src/file.h src/file.cpp               <SPAN class="cmt"> # Add two files</SPAN>
# svn commit -m 'Added new class file'          <SPAN class="cmt"> # Commit the changes with a message</SPAN>
# svn ls http://host.url/svn/project1/tags/     <SPAN class="cmt"> # List all tags</SPAN>
# svn move foo.c bar.c                          <SPAN class="cmt"> # Move (rename) files</SPAN>
# svn delete some_old_file                      <SPAN class="cmt"> # Delete files</SPAN>
</PRE></DIV>
<DIV id="other">
<H1><A>实用命令</A></H1>
<P class="xrefp"><A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#less">less</A> 
| <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#vi">vi</A> | <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#mail">mail</A> | <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#tar">tar</A> | <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#dd">dd</A> | <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#screen">screen</A> | <A 
class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#find">find</A> | <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#misccmd">混杂的</A></P>
<H2 id="less">less</H2><CODE>less</CODE> 命令用来在控制台中分屏显示文本文档。它在许多发行版中可用。 
<PRE># less unixtoolbox.xhtml</PRE>一些重要指令(^N 代表 [control]-[N])： 
<UL style="list-style-type: none;">
  <LI><STRONG>h  H</STRONG> &nbsp; &nbsp; &nbsp; 显示指令的汇总列表</LI>
  <LI><STRONG>f  ^F  ^V  SPACE</STRONG> &nbsp; &nbsp; &nbsp; 向前滚动一屏(或者 N 行)</LI>
  <LI><STRONG>b  ^B  ESC-v</STRONG> &nbsp; &nbsp; &nbsp; 向后滚动一屏(或者 N 行)</LI>
  <LI><STRONG>F</STRONG> &nbsp; &nbsp; &nbsp; 向前滚动；类似于"tail -f"</LI>
  <LI><STRONG>/pattern</STRONG> &nbsp; &nbsp; &nbsp; 向前搜索匹配该模式的行</LI>
  <LI><STRONG>?pattern</STRONG> &nbsp; &nbsp; &nbsp; 向后搜索匹配该模式的行</LI>
  <LI><STRONG>n</STRONG> &nbsp; &nbsp; &nbsp; 重复之前的搜索</LI>
  <LI><STRONG>N</STRONG> &nbsp; &nbsp; &nbsp; 反方向重复之前的搜索</LI>
  <LI><STRONG>q</STRONG> &nbsp; &nbsp; &nbsp; 退出</LI></UL>
<H2 id="vi">vi</H2>Vi 在任何 Linux/Unix 发行安装版(gentoo 没有?)上都存在。因此，我们有必要了解一些基本的命令。Vi 
有两个模式：命令模式和插入模式。使用 <STRONG>[ESC]</STRONG> 键可进入命令模式，使用 <STRONG>i</STRONG> 
键可进入插入模式。如果你迷失了，可在命令模式下键入 <CODE>: help</CODE>。<BR>编辑器 <CODE>nano</CODE> 和 
<CODE>pico</CODE> 通常也都可用，而且更容易(IMHO)使用。 
<H3>Quit</H3>
<UL style="list-style-type: none;">
  <LI><STRONG>:w</STRONG> newfilename &nbsp; &nbsp; &nbsp; 保存文件为 
newfilename</LI>
  <LI><STRONG>:wq or :x</STRONG> &nbsp; &nbsp; &nbsp; 保存并退出</LI>
  <LI><STRONG>:q!</STRONG> &nbsp; &nbsp; &nbsp; 退出但不保存</LI></UL>
<H3>移动和查找</H3>
<UL style="list-style-type: none;">
  <LI><STRONG>/string</STRONG> &nbsp; &nbsp; &nbsp; 向前查找 string</LI>
  <LI><STRONG>?string</STRONG> &nbsp; &nbsp; &nbsp; 向后查找 string</LI>
  <LI><STRONG>n</STRONG> &nbsp; &nbsp; &nbsp; 同方向重复上一次搜索命令</LI>
  <LI><STRONG>N</STRONG> &nbsp; &nbsp; &nbsp; 反方向重复上一次搜索命令</LI>
  <LI><STRONG>{</STRONG> &nbsp; &nbsp; &nbsp; 光标移至段落结尾</LI>
  <LI><STRONG>}</STRONG> &nbsp; &nbsp; &nbsp; 光标移至段落开头</LI>
  <LI><STRONG>1G</STRONG> &nbsp; &nbsp; &nbsp; 光标移至文件的第一行首</LI>
  <LI><STRONG>nG</STRONG> &nbsp; &nbsp; &nbsp; 光标移至文件的第 n 行首</LI>
  <LI><STRONG>G</STRONG> &nbsp; &nbsp; &nbsp; 光标移至文件的最后一行首</LI>
  <LI><STRONG>:%s/OLD/NEW/g</STRONG> &nbsp; &nbsp; &nbsp; 替换所有查找到的 OLD 为 
NEW</LI></UL>
<H3>删除文本</H3>
<UL style="list-style-type: none;">
  <LI><STRONG>dd</STRONG> &nbsp; &nbsp; &nbsp; 删除当前行</LI>
  <LI><STRONG>D</STRONG> &nbsp; &nbsp; &nbsp; 删除光标到当前行末尾的字符</LI>
  <LI><STRONG>dw</STRONG> &nbsp; &nbsp; &nbsp; 删除单词</LI>
  <LI><STRONG>x</STRONG> &nbsp; &nbsp; &nbsp; 删除字符</LI>
  <LI><STRONG>u</STRONG> &nbsp; &nbsp; &nbsp; 回复上一次操作</LI>
  <LI><STRONG>U</STRONG> &nbsp; &nbsp; &nbsp; 回复所有此行的更改</LI></UL>
<H2 id="mail">mail</H2><CODE>mail</CODE> 
命令是一个读取和发送邮件的应用程序，她通常已安装。要发送一封邮件，可以简单的输入 "mail 
user@domain"。其第一行为主题，然后是邮件内容。在一个新行中使用单个点(.)来结束并发送邮件。例子： 
<PRE># mail c@cb.vu
Subject: Your text is full of typos
"For a moment, nothing happened. Then, after a second or so, 
nothing continued to happen."
.
EOT
#
</PRE>这同样可用于管道： 
<PRE># echo "This is the mail body" | mail c@cb.vu</PRE>也是测试邮件服务器的简单方法。 
<H2 id="tar">tar</H2>命令 <CODE>tar</CODE> (磁带存档) 可以为文件和目录创建档案。归档文件 .tar 
是未压缩的，一个压缩过的归档文件的后缀是 .tgz 或 .tar.gz (zip) 或者 .tbz 
(bzip2)。不要使用绝对路径建立一个归档文件，你可能要解开这个归档文件到某个地方。一些常用命令如下： 
<H3>创建</H3>
<PRE># cd /
# tar -cf home.tar home/        <SPAN class="cmt"># 归档整个 /home 目录(c 为创建)</SPAN>
# tar -czf home.tgz home/       <SPAN class="cmt"># 等同于 zip 压缩</SPAN>
# tar -cjf home.tbz home/       <SPAN class="cmt"># 等同于 bzip2 压缩</SPAN>
</PRE>
从一个目录树中只包含一个(或2个)目录，并保持相对目录结构。举个例子，/usr/local/etc 和 
/usr/local/www，它们在归档文件中的第一层目录是 local/。 
<PRE># tar -C /usr -czf local.tgz local/etc local/www
# tar -C /usr -xzf local.tgz    <SPAN class="cmt"># 释放 local 目录到 /usr</SPAN>
# cd /usr; tar -xzf local.tgz   <SPAN class="cmt"># 同上面一样</SPAN>
</PRE>
<H3>释放(Extract)</H3>
<PRE># tar -tzf home.tgz             <SPAN class="cmt"># 列出归档文件中的所有文件，并不释放</SPAN>
# tar -xf home.tar              <SPAN class="cmt"># 释放归档文件(x 为释放)</SPAN>
# tar -xzf home.tgz             <SPAN class="cmt"># 等同于 zip 压缩</SPAN>
# tar -xjf home.tgz             <SPAN class="cmt"># 等同于 bzip2 压缩</SPAN>
# tar -xjf home.tgz home/colin/file.txt    <SPAN class="cmt"># 释放单个文件</SPAN>
</PRE>
<H3>更高级的</H3>
<PRE># tar c dir/ | gzip | ssh user@remote 'dd of=dir.tgz' <SPAN class="cmt"># 归档压缩 dir/ 目录并存储到远程主机上</SPAN>
# tar cvf - `find . -print` &gt; backup.tar              <SPAN class="cmt"># 归档当前目录</SPAN>
# tar -cf - -C /etc . | tar xpf - -C /backup/etc      <SPAN class="cmt"># 拷贝目录</SPAN>
# tar -cf - -C /etc . | ssh user@remote tar xpf - -C /backup/etc      <SPAN class="cmt"># 远程拷贝</SPAN>
# tar -czf home.tgz --exclude '*.o' --exclude 'tmp/' home/
</PRE>
<H2 id="dd">dd</H2>程序 <CODE>dd</CODE> (磁盘备份(disk dump) 或 destroy disk，也可看 <A 
href="http://roesler-ac.de/wolfram/acro/credits.htm">dd 的含义</A>) 
用来拷贝分区、磁盘或者其它拷贝。通常这么用： 
<PRE># dd if=&lt;source&gt; of=&lt;target&gt; bs=&lt;byte size&gt; conv=&lt;conversion&gt;</PRE>重要的 
conv 选项： 
<UL style="list-style-type: none;">
  <LI><CODE>notrunc</CODE> &nbsp; &nbsp; &nbsp; 不截短输出文件</LI>
  <LI><CODE>noerror</CODE> &nbsp; &nbsp; &nbsp; 出错时不停止处理(e.g. 坏扇区)</LI>
  <LI><CODE>sync</CODE> &nbsp; &nbsp; &nbsp; 
把每个输入块填充到ibs个字节，不足部分用空(NUL)字符补齐</LI></UL>默认字节大小为 512 (一个扇区)。MBR 处于磁盘的第一个扇区，之后的 
63 个扇区是空的。较大的字节大小可以加快拷贝速度但也需要更多的内存。 
<H3>备份和恢复</H3>
<PRE># dd if=/dev/hda of=/dev/hdc bs=16065b                <SPAN class="cmt"># 拷贝磁盘到磁盘(相同大小)</SPAN>
# dd if=/dev/sda7 of /home/root.img bs=4096 conv=notrunc,noerror <SPAN class="cmt"># 备份 /</SPAN>
# dd if /home/root.img of=/dev/sda7 bs=4096 conv=notrunc,noerror <SPAN class="cmt"># 恢复 /</SPAN>
# dd bs=1M if=/dev/ad4s3e | gzip -c &gt; ad4s3e.gz                  <SPAN class="cmt"># 压缩备份</SPAN>
# gunzip -dc ad4s3e.gz | dd of=/dev/ad0s3e bs=1M                 <SPAN class="cmt"># 解压恢复</SPAN>
# dd bs=1M if=/dev/ad4s3e | gzip | ssh eedcoba@fry 'dd of=ad4s3e.gz' <SPAN class="cmt"># 也可为远程的</SPAN>
# gunzip -dc ad4s3e.gz | ssh eedcoba@host 'dd of=/dev/ad0s3e bs=1M'
# dd if=/dev/ad0 of=/dev/ad2 skip=1 seek=1 bs=4k conv=noerror    <SPAN class="cmt"># 忽略 MBR</SPAN>
    <SPAN class="cmt"># 如果目标(ad2)比较小，这是必须的。</SPAN>
</PRE>
<H3>恢复</H3>该 <CODE>dd</CODE> 命令会读取分区的<I>每一个区块</I>，即所有区块。对于有问题的区块，最好使用 
<CODE>conv=sync,noerror</CODE> 选项，dd 将会跳过坏的区块并入 0。因此，这就是设置块大小等于或小于磁盘块大小的重要性。1k 
大小似乎安全，用 <CODE>bs=1k</CODE> 来设置它。假如一个磁盘有坏扇区并且有个分区的数据要恢复，那么用 dd 
工具创建一个镜像文件，挂载这个镜像文件，然后拷贝内容到新的磁盘中。如果用了 <CODE>noerror</CODE> 选项，dd 会跳过坏扇区并写入 
0，也即坏扇区中的内容会丢失。 
<PRE># dd if=/dev/hda of=/dev/null bs=1m                   <SPAN class="cmt"># 检查坏扇区</SPAN>
# dd bs=1k if=/dev/hda1 conv=sync,noerror,notrunc | gzip | ssh \ <SPAN class="cmt"># 发送到远程</SPAN>
root@fry 'dd of=hda1.gz bs=1k'
# dd bs=1k if=/dev/hda1 conv=sync,noerror,notrunc of=hda1.img    <SPAN class="cmt"># 存储为一个映像文件</SPAN>
# mount -o loop /hda1.img /mnt                        <SPAN class="cmt"># <A class="xref" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#createimg">挂载这个映像文件</A></SPAN>
# rsync -ax /mnt/ /newdisk/                           <SPAN class="cmt"># 拷贝到一个新磁盘</SPAN>
# dd if=/dev/hda of=/dev/hda                          <SPAN class="cmt"># 刷新磁状态</SPAN>
  <SPAN class="cmt"># 上面的命令对于刷新磁盘(refresh disk)很有用。这绝对安全，但必须先卸载磁盘。</SPAN>
</PRE>
<H3>删除</H3>
<PRE># dd if=/dev/zero of=/dev/hdc                         <SPAN class="cmt"># 删除全部数据</SPAN>
# dd if=/dev/urandom of=/dev/hdc                      <SPAN class="cmt"># 更好的删除全部数据<SPAN class="fn">译注：/dev/urandom 设备文件提供了一种比单独使用$RANDOM更好的,能产生更"随机"的随机数的方法。</SPAN></SPAN>
# kill -USR1 PID                                      <SPAN class="cmt"># 查看 dd 进度(仅Linux!)</SPAN>
</PRE>
<H3>MBR 技巧</H3>MBR 包含了引导程序和分区表，它的大小为 512 字节。前 446 字节为引导程序，446 到 512 字节为分区表。 
<PRE># dd if=/dev/sda of=/mbr_sda.bak bs=512 count=1                  <SPAN class="cmt"># 完全备份 MBR</SPAN>
# dd if=/dev/zero of=/dev/sda bs=512 count=1                     <SPAN class="cmt"># 删除 MBR 和分区表</SPAN>
# dd if=/mbr_sda.bak of=/dev/sda bs=512 count=1                  <SPAN class="cmt"># 完全恢复MBR</SPAN>
# dd if=/mbr_sda.bak of=/dev/sda bs=446 count=1                  <SPAN class="cmt"># 仅回复引导程序</SPAN>
# dd if=/mbr_sda.bak of=/dev/sda bs=1 count=64 skip=446 seek=446 <SPAN class="cmt"># 恢复分区表</SPAN>
</PRE>
<H2 id="screen">screen</H2>Screen 提供了两个主要功能： 
<UL>
  <LI>在一个终端内运行多个终端会话(terminal session)。</LI>
  <LI>一个已启动的程序与运行它的真实终端分离的，因此可运行于后台。真实的终端可以被关闭，还可以在稍后再重新接上(reattached)。</LI></UL>
<H3>简短实例</H3>开启 screen： 
<PRE># screen</PRE>在 screen 会话中，我们可以开启一个长时间运行的程序(如 top)。Detach 这个终端，之后可以从其他机器 
reattach 这个相同的终端(比如通过 ssh)。 
<PRE># top</PRE>现在用 <STRONG>Ctrl-a Ctrl-d</STRONG> 来 detach。Reattach 终端： 
<PRE># screen -r</PRE>或更好的： 
<PRE># screen -R -D</PRE>现在 attach 到这里。具体意思是：先试图恢复离线的 screen 会话。若找不到离线的 screen 
会话，即建立新的 screen 会话给用户。 
<H3>Screen 命令 (在 screen 中)</H3>所有命令都以 <STRONG>Ctrl-a</STRONG> 开始。 
<UL>
  <LI><STRONG>Ctrl-a ?</STRONG> 各功能的帮助摘要</LI>
  <LI><STRONG>Ctrl-a c</STRONG> 创建一个新的 window (终端)</LI>
  <LI><STRONG>Ctrl-a Ctrl-n 和 Ctrl-a Ctrl-p</STRONG> 切换到下一个或前一个 window</LI>
  <LI><STRONG>Ctrl-a Ctrl-N</STRONG> N 为 0 到 9 的数字，用来切换到相对应的 window</LI>
  <LI><STRONG>Ctrl-a "</STRONG> 获取所有正在运行的 window 的可导航的列表</LI>
  <LI><STRONG>Ctrl-a a</STRONG> 清楚错误的 Ctrl-a</LI>
  <LI><STRONG>Ctrl-a Ctrl-d</STRONG> 断开所有会话，会话中所有任务运行于后台</LI>
  <LI><STRONG>Ctrl-a x</STRONG> 用密码锁柱 screen 终端</LI></UL>当程序内部运行终端关闭并且你登出该终端时，该 
screen 会话就会被终止。 
<H2 id="find">Find</H2>一些重要选项： 
<UL style="list-style-type: none;">
  <LI><CODE>-x</CODE> (BSD) <CODE>-xdev</CODE> (Linux) &nbsp; &nbsp; &nbsp; 
  留于同一文件系统 (fstab 中的 dev)</LI>
  <LI><CODE>-exec cmd {} \;</CODE> &nbsp; &nbsp; &nbsp; 执行命令并用全路径替换 {}</LI>
  <LI><CODE>-iname</CODE> &nbsp; &nbsp; &nbsp; 同 -name 一样，但不区分大小写</LI>
  <LI><CODE>-ls</CODE> &nbsp; &nbsp; &nbsp; 显示关于文件的信息(同 ls -la)</LI>
  <LI><CODE>-size n</CODE> &nbsp; &nbsp; &nbsp; n 为 +-n (k M G T P)</LI>
  <LI><CODE>-cmin n</CODE> &nbsp; &nbsp; &nbsp; 查找系统中最后 n 分钟改变文件状态的文件</LI></UL>
<PRE># find . -type f ! -perm -444        <SPAN class="cmt"># 寻找所有无法读取的文件</SPAN>
# find . -type d ! -perm -111        <SPAN class="cmt"># 寻找所有无法访问的目录</SPAN>
# find /home/user/ -cmin 10 -print   <SPAN class="cmt"># 寻找最后 10 分钟创建或修改的文件</SPAN>
# find . -name '*.[ch]' | xargs grep -E 'expr' <SPAN class="cmt"># 在当前目录及子目录搜索 'expr' 表达式</SPAN>
# find / -name "*.core" | xargs rm   <SPAN class="cmt"># 寻找 core 垃圾并删除它们(也可试试 core.*)</SPAN>
# find / -name "*.core" -print -exec rm {} \;  <SPAN class="cmt"># 另一种语法</SPAN>
      <SPAN class="cmt"># 寻找图像文件并创建一个归档文件，iname 为不区分大小写。-r 为附加</SPAN>
# find . \( -iname "*.png" -o -iname "*.jpg" \) -print -exec tar -rf images.tar {} \;
# find . -type f -name "*.txt" ! -name README.txt -print  <SPAN class="cmt"># 除 README.txt 的文件</SPAN>
# find /var/ -size +10M -exec ls -lh {} \;     <SPAN class="cmt"># 查找 &gt; 10 MB 的文件</SPAN>
# find /var/ -size +10M -ls           <SPAN class="cmt"># 这个更简单</SPAN>
# find . -size +10M -size -50M -print
# find /usr/ports/ -name work -type d -print -exec rm -rf {} \;  <SPAN class="cmt"># 清理 port</SPAN>
      <SPAN class="cmt"># 以 SUID 查找文件；这些文件很脆弱，必须保持安全。</SPAN>
# find / -type f -user root -perm -4000 -exec ls -l {} \; 
</PRE>小心 
xarg 或 exec，因为当文件或目录中包含空格时可能会返回错误的结果。在有疑惑时用 "-print0 | xargs -0" 代替 "| xargs"。选项 
-print0 必须在 find 命令的最后。看这个不错的 <A href="http://www.hccfl.edu/pollock/Unix/FindCmd.htm">find 
迷你教程</A><SPAN class="fn">http://www.hccfl.edu/pollock/Unix/FindCmd.htm</SPAN>. 
<PRE># find . -type f | xargs ls -l       <SPAN class="cmt"># 不能工作于有空格的名字</SPAN>
# find . -type f -print0 | xargs -0 ls -l  <SPAN class="cmt"># 可工作于有空格的名字</SPAN>
# find . -type f -exec ls -l '{}' \; <SPAN class="cmt"># 或使用用于 -exec 的引用 '{}'</SPAN>
</PRE>
<H2 id="misccmd">混杂的</H2>
<PRE># which command                      <SPAN class="cmt"># 显示命令的全路径名</SPAN>
# time command                       <SPAN class="cmt"># 显示一个命令执行完成所用的时间</SPAN>
# time cat                           <SPAN class="cmt"># 使用 time 作为秒表，用 Ctrl-c 来停止</SPAN>
# set | grep $USER                   <SPAN class="cmt"># 列显当前环境变量</SPAN>
# cal -3                             <SPAN class="cmt"># 显示三个月日历</SPAN>
# date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]
# date 10022155                      <SPAN class="cmt"># 设置日期和时间</SPAN>
# whatis grep                        <SPAN class="cmt"># 显示命令的简短信息</SPAN>
# whereis java                       <SPAN class="cmt"># 查询命令的的路径和标准目录</SPAN>
# setenv varname value               <SPAN class="cmt"># 设置环境变量，设置变量 varname 的值为 value (csh/tcsh)</SPAN>
# export varname="value"             <SPAN class="cmt"># 设置环境变量，设置变量 varname 的值为 value  (sh/ksh/bash)</SPAN>
# pwd                                <SPAN class="cmt"># 显示当前工作目录</SPAN>
# mkdir -p /path/to/dir              <SPAN class="cmt"># 如果存在不显示错误，建立所需的上级目录</SPAN>
# mkdir -p project/{bin,src,obj,doc/{html,man,pdf},debug/some/more/dirs}
# rmdir /path/to/dir                 <SPAN class="cmt"># 移除目录</SPAN>
# rm -rf /path/to/dir                <SPAN class="cmt"># 移除目录和其内容(强制)</SPAN>
# cp -la /dir1 /dir2                 <SPAN class="cmt"># 存档、硬连接目录所有文件，用来替代拷贝</SPAN>
# cp -lpR /dir1 /dir2                <SPAN class="cmt"># 同上 (FreeBSD)</SPAN>
# cp unixtoolbox.xhtml{,.bak}        <SPAN class="cmt"># 拷贝文件成新扩展名的快速方法</SPAN>
# mv /dir1 /dir2                     <SPAN class="cmt"># 修改目录名</SPAN>
</PRE></DIV>
<DIV id="software">
<H1><A>软件安装</A></H1>
<H2 id="softwarelist">列出已安装过的软件包</H2>
<PRE># rpm -qa                            <SPAN class="cmt"># 列出已安装过的软件包(RH, SuSE, 基于 RPM 的)</SPAN>
# dpkg -l                            <SPAN class="cmt"># Debian, Ubuntu</SPAN>
# pkg_info                           <SPAN class="cmt"># 列出所有已安装过的软件包(FreeBSD)</SPAN>
# pkg_info -W smbd                   <SPAN class="cmt"># 查看 smbd 安装了那些软件包(FreeBSD)</SPAN>
# pkginfo                            <SPAN class="cmt"># Solaris</SPAN>
</PRE>
<H2 id="softwareadd">添加/删除软件</H2>前端界面：SuSE 为 yast2/yast，Red Hat 为 
redhat-config-packages。 
<PRE># rpm -i pkgname.rpm                 <SPAN class="cmt"># 安装软件包(RH, SuSE, 基于 RPM 的)</SPAN>
# rpm -e pkgname                     <SPAN class="cmt"># 删除软件包</SPAN>
</PRE>
<H3>Debian</H3>
<PRE># apt-get update                     <SPAN class="cmt"># 更新源列表</SPAN>
# apt-get install emacs              <SPAN class="cmt"># 安装 emacs 软件包</SPAN>
# dpkg --remove emacs                <SPAN class="cmt"># 删除 emacs 软件包</SPAN>
# dpkg -S file                       <SPAN class="cmt"># 查找拥有该 file 的软件包</SPAN>
</PRE>
<H3>Gentoo</H3>Gentoo 使用 emerge 作为 "Portage" 软件包管理系统的核心。 
<PRE># emerge --sync                      <SPAN class="cmt"># 同步更新本地 protage 树</SPAN>
# emerge -u packagename              <SPAN class="cmt"># 安装或更新一个软件包</SPAN>
# emerge -C packagename              <SPAN class="cmt"># 删除软件包</SPAN>
# revdep-rebuild                     <SPAN class="cmt"># 修复依赖关系的缺失</SPAN>
</PRE>
<H3>Solaris</H3>&lt;cdrom&gt; 路径通常为 <CODE>/cdrom/cdrom0</CODE>. 
<PRE># pkgadd -d &lt;cdrom&gt;/Solaris_9/Product SUNWgtar
# pkgadd -d SUNWgtar                 <SPAN class="cmt"># 添加下载的软件包(先要 bunzip2)</SPAN>
# pkgrm SUNWgtar                     <SPAN class="cmt"># 删除软件包</SPAN>
</PRE>
<H3>FreeBSD</H3>
<PRE># pkg_add -r rsync                   <SPAN class="cmt"># 获取并安装 rsync</SPAN>
# pkg_delete /var/db/pkg/rsync-xx    <SPAN class="cmt"># 删除 rsync 软件包</SPAN>
</PRE>
可使用 <CODE>PACKAGESITE</CODE> 环境变量来设置哪里可以获取软件包。举个例子： 
<PRE># export PACKAGESITE=ftp://ftp.freebsd.org/pub/FreeBSD/ports/i386/packages/Latest/ 
# or ftp://ftp.freebsd.org/pub/FreeBSD/ports/i386/packages-6-stable/Latest/
</PRE>
<H3>FreeBSD ports</H3>Port 树 <CODE>/usr/ports/</CODE> 是一个准备编译和安装的软件集。可用 
<CODE>portsnap</CODE> 工具来跟新 port。 
<PRE># portsnap fetch extract             <SPAN class="cmt"># 当第一次运行这个命令，会创建 port 树</SPAN>
# portsnap fetch update              <SPAN class="cmt"># 跟新 port 树</SPAN>
# cd /usr/ports/net/rsync/           <SPAN class="cmt"># 选择软件安装目录</SPAN>
# make install distclean             <SPAN class="cmt"># 安装并清理(也可看 man ports)</SPAN>
# make package                       <SPAN class="cmt"># Make 一个二进制软件包</SPAN>
</PRE>
<H2 id="librarypath">库路径</H2>
由于复杂的依赖关系和运行时链接，程序难于分发或拷贝到其他系统。不过对于较少依赖关系的小程序，缺失的库可被拷贝过去。运行时库(即缺失的库)可用 
<CODE>ldd</CODE> 和 <CODE>ldconfig</CODE> 来检查和管理。 
<PRE># ldd /usr/bin/rsync                 <SPAN class="cmt"># 列出所有所需的运行时库</SPAN>
# ldconfig -n /path/to/libs/         <SPAN class="cmt"># 添加一个路径到共享库目录Add a path to the shared libraries directories</SPAN>
# ldconfig -m /path/to/libs/         <SPAN class="cmt"># FreeBSD</SPAN>
# LD_LIBRARY_PATH                    <SPAN class="cmt"># 设置连接库路径的环境变量</SPAN>
</PRE></DIV>
<DIV id="convert">
<H1><A>媒体转换</A></H1>有时候需要转换一个视频、音频文件或者文档成其他格式。 
<H2 id="encoding">文本编码</H2>文本编码可以得到完全错误的，特别是当语言需要某些特殊字符像 àäç。命令 
<CODE>iconv</CODE> 可以从一个编码转换成另一个编码。 
<PRE># iconv -f &lt;from_encoding&gt; -t &lt;to_encoding&gt; &lt;input_file&gt;
# iconv -f ISO8859-1 -t UTF-8 -o file.input &gt; file_utf8
# iconv -l                           <SPAN class="cmt"># 列显系统所支持的字符编码</SPAN>
</PRE>
若文档显示良好，通常都可不使用 -f 选项，iconv 会使用本地字符集(char-set)。 
<H2 id="newlines">Unix - DOS 新行</H2>在 Unix Shell 中转换 DOS (CR/LF) 到 Unix (LF) 
新行格式。也可使用 <CODE>dos2unix</CODE> 和 <CODE>unix2dos</CODE> 工具，如果你有它们的话。 
<PRE># sed 's/.$//' dosfile.txt &gt; unixfile.txt
</PRE>在 Windows 环境中转换 Unix 到 
Dos 新行格式。需要在 mingw 或 cygwin 中使用 sed。 
<PRE># sed -n p unixfile.txt &gt; dosfile.txt
</PRE>
<H2>PDF 转换成 Jpeg 和 连接一串 PDF 文件</H2>用 <CODE>gs</CODE> (GhostScript) 工具转换 PDF 
文档的每一页成 jpeg (或 png)图像。也可以使用更短的 <CODE>convert</CODE> (来自 ImageMagick 或 
GraphicsMagick 工具) 命令。 
<PRE># gs -dBATCH -dNOPAUSE -sDEVICE=jpeg -r150 -dTextAlphaBits=4 -dGraphicsAlphaBits=4 \
 -dMaxStripSize=8192 -sOutputFile=unixtoolbox_%d.jpg unixtoolbox.pdf
# convert unixtoolbox.pdf unixtoolbox-%03d.png
# convert *.jpeg images.pdf          <SPAN class="cmt"># 把所有图片转换成一份简单的 PDF 文档</SPAN>
</PRE>Ghostscript 
同样可连接多个 pdf 文件成一份 PDF 文档。这仅可工作于这些 PDF 文件都 "呈现一致(well behaved)" 的情况下。 
<PRE># gs -q -sPAPERSIZE=a4 -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=all.pdf \
file1.pdf file2.pdf ...              <SPAN class="cmt"># 在 Windows 上使用 '#' 代替 '='</SPAN>
</PRE>
<H2>视频转换</H2>使用 mpeg4 编码压缩佳能数码相机视频并修复无用音质。 
<PRE># mencoder -o videoout.avi -oac mp3lame -ovc lavc -srate 11025 \
-channels 1 -af-adv force=1 -lameopts preset=medium -lavcopts \
vcodec=msmpeg4v2:vbitrate=600 -mc 0 vidoein.AVI
</PRE>对于声音的处理可看 
<A href="http://sox.sourceforge.net/">sox</A>。 
<H2>拷贝音频光盘</H2>程序 <A href="http://xiph.org/paranoia/" 
rel="nofollow"><CODE>cdparanoia</CODE></A><SPAN 
class="fn">http://xiph.org/paranoia/</SPAN> 可以保存音轨(FreeBSD port 在 
audio/cdparanoia/)，<CODE>oggenc</CODE> 可编码 Ogg Vorbis 格式，<CODE>lame</CODE> 可转换成 
mp3。 
<PRE># cdparanoia -B                      <SPAN class="cmt"># 拷贝音轨成 wav 文件到当前目录列表(dir)</SPAN>
# lame -b 256 in.wav out.mp3         <SPAN class="cmt"># 编码成 256 kb/s 的 mp3</SPAN>
# for i in *.wav; do lame -b 256 $i `basename $i .wav`.mp3; done
# oggenc in.wav -b 256 out.ogg       <SPAN class="cmt"># 编码成 256 kb/s 的 Ogg Vorbis</SPAN>
</PRE></DIV>
<DIV id="printing">
<H1><A>打印</A></H1>
<H2>打印命令 lpr</H2>
<PRE style="page-break-inside: avoid;"># lpr unixtoolbox.ps                 <SPAN class="cmt"># 用默认打印机打印</SPAN>
# export PRINTER=hp4600              <SPAN class="cmt"># 更改默认打印机</SPAN>
# lpr -Php4500 #2 unixtoolbox.ps     <SPAN class="cmt"># 指定打印机 hp4500 并打印 2 份</SPAN>
# lpr -o Duplex=DuplexNoTumble ...   <SPAN class="cmt"># 启用双面打印</SPAN>
# lpr -o PageSize=A4,Duplex=DuplexNoTumble ...
# lpq                                <SPAN class="cmt"># 查看默认打印机的队列</SPAN>
# lpq -l -Php4500                    <SPAN class="cmt"># 详细显示打印机队列信息</SPAN>
# lprm -                             <SPAN class="cmt"># 删除所有打印机内的用户打印作业</SPAN>
# lprm -Php4500 3186                 <SPAN class="cmt"># 删除作业 3186。可使用 lpq 查看作业号</SPAN>
# lpc status                         <SPAN class="cmt"># 列印所有可用打印机</SPAN>
# lpc status hp4500                  <SPAN class="cmt"># 如果打印机在线，查看其状态和列队长度</SPAN>
</PRE>
当要打印 PDF 文件时，一些打印设备不具备处理 postscript 的能力。可以这样解决<SPAN 
class="fn">译注：此例事实上利用管道(pipe)方式将 PDF 的转换结果利用 -sOutputFile 选项导入给 lpr 打印。</SPAN>： 
<PRE># gs -dSAFER -dNOPAUSE -sDEVICE=deskjet -sOutputFile=\|lpr file.pdf</PRE></DIV>
<DIV id="databases">
<H1><A>数据库</A></H1>
<H2 id="pgsql">PostgreSQL</H2>
<H3>更改 root 用户或其它用户的密码</H3>
<PRE># psql -d template1 -U pgsql
&gt; alter user pgsql with password 'pgsql_password';  <SPAN class="cmt"># pgsql 为需要更改密码的用户名</SPAN>
</PRE>
<H3>创建用户和数据库</H3>命令 <CODE>createuser</CODE>, <CODE>dropuser</CODE>, 
<CODE>createdb</CODE> 和 <CODE>dropdb</CODE> 等同于 SQL 命令<SPAN class="fn">译注：其实是一个 
Shell 脚本</SPAN>的快捷方式。我们创建一个新用户叫 bob 和一个数据库叫 bobdb；使用数据库的超级用户 pgsql 来创建： 
<PRE># createuser -U pgsql -P bob         <SPAN class="cmt"># -P 会请求一个秘密</SPAN>
# createdb -U pgsql -O bob bobdb     <SPAN class="cmt"># 新数据库 bobdn 的所有者是 bob<SPAN class="fn">译注：通常，执行这个命令的数据库用户成为新数据库的所有者。不过，如果执行用户拥有合适的权限，那么他可以通过 -O 指定合适的用户。</SPAN></SPAN>
# dropdb bobdb                       <SPAN class="cmt"># 删除数据库 bobdb</SPAN>
# dropuser bob                       <SPAN class="cmt"># 删除用户 bob</SPAN>
</PRE>一般数据库认证机制配置在 
pg_hba.conf 文件中。 
<H3>允许远程访问</H3>文件 <CODE>$PGSQL_DATA_D/postgresql.conf</CODE> 可指定绑定地址。对于 Postgres 
8.x 通常为 <CODE>listen_addresses = '*'</CODE>。<BR>文件 
<CODE>$PGSQL_DATA_D/pg_hba.conf</CODE> 定义了访问控制。举例： 
<PRE># TYPE  DATABASE    USER        IP-ADDRESS        IP-MASK          METHOD
host    bobdb       bob        212.117.81.42     255.255.255.255   password
host    all         all        0.0.0.0/0                           password
</PRE>
<H3>备份和恢复</H3>使用 pgsql 或 postgres 用户来完成备份与恢复。下面是备份和恢复单个数据库： 
<PRE># pg_dump --clean dbname &gt; dbname_sql.dump
# psql dbname &lt; dbname_sql.dump
</PRE>备份和恢复所有数据库(包括用户)： 
<PRE># pg_dumpall --clean &gt; full.dump
# psql -f full.dump postgres
</PRE>在这个例子中，你可以声明任意现有的数据库进行连接，但是如果你是向一个空的数据库集群装载，那么 
postgres 应该是比较好的选择。 
<H2 id="mysql">MySQL</H2>
<H3>更改 mysql root 用户或其它用户的密码</H3>
<H4>方法 1</H4>
<PRE># /etc/init.d/mysql stop
<I><SPAN class="cmt">or</SPAN></I>
# killall mysqld
# mysqld --skip-grant-tables
# mysqladmin -u root password 'newpasswd'
# /etc/init.d/mysql start
</PRE>
<H4>方法 2</H4>
<PRE># mysql -u root mysql
<SPAN class="cmt">mysql&gt;</SPAN> UPDATE USER SET PASSWORD=PASSWORD("newpassword") where user='root';
<SPAN class="cmt">mysql&gt;</SPAN> FLUSH PRIVILEGES;                           <SPAN class="cmt"># 使用用户名替代"root"</SPAN>
<SPAN class="cmt">mysql&gt;</SPAN> quit
</PRE>
<H3>创建用户和数据库</H3>
<PRE># mysql -u root mysql
<SPAN class="cmt">mysql&gt;</SPAN> CREATE DATABASE bobdb;
<SPAN class="cmt">mysql&gt;</SPAN> GRANT ALL ON *.* TO 'bob'@'%' IDENTIFIED BY 'pwd'; 
                           <SPAN class="cmt"># 使用 localhost 替代 % 来限制网络访问</SPAN>
<SPAN class="cmt">mysql&gt;</SPAN> DROP DATABASE bobdb;                        <SPAN class="cmt"># 删除数据库 bobdb</SPAN>
<SPAN class="cmt">mysql&gt;</SPAN> DROP USER bob;                              <SPAN class="cmt"># 删除用户 bob</SPAN>
<SPAN class="cmt">mysql&gt;</SPAN> DELETE FROM mysql.user WHERE user='bob and host='hostname'; 
                           <SPAN class="cmt"># 删除 mysql 数据库 user 表中 user=bob,host=hostname 的记录</SPAN>
<SPAN class="cmt">mysql&gt;</SPAN> FLUSH PRIVILEGES;
</PRE>
<H3>允许远程访问</H3>远程访问通常允许单个数据库，而不是所有的数据库。文件 <CODE>/etc/my.cnf</CODE> 包含约定的 IP 
地址。通常为 <CODE>bind-address =</CODE> 绑定地址。 
<PRE># mysql -u root mysql
<SPAN class="cmt">mysql&gt;</SPAN> GRANT ALL ON bobdb.* TO bob@'xxx.xxx.xxx.xxx' IDENTIFIED BY 'PASSWORD';
<SPAN class="cmt">mysql&gt;</SPAN> REVOKE GRANT OPTION ON foo.* FROM bar@'xxx.xxx.xxx.xxx';
<SPAN class="cmt">mysql&gt;</SPAN> FLUSH PRIVILEGES;                  <SPAN class="cmt"># 使用 'hostname' 也可为 '%' 来完全访问</SPAN>
</PRE>
<H3>备份和恢复</H3>备份和恢复单个数据库： 
<PRE># mysqldump -u root -psecret --add-drop-database dbname &gt; dbname_sql.dump
# mysql -u root -psecret -D dbname &lt; dbname_sql.dump
</PRE>备份和恢复所有的数据库： 
<PRE># mysqldump -u root -psecret --add-drop-database --all-databases &gt; full.dump
# mysql -u root -psecret &lt; full.dump
</PRE>这里 
mysql root 的密码为 "secret"，-p 选项后面没有空格。当单独使用 -p 选项(不跟密码)，命令行提示符后会要求输入密码。 
<H2 id="sqlite">SQLite</H2><A href="http://www.sqlite.org/">SQLite</A><SPAN 
class="fn">http://www.sqlite.org</SPAN> 
是一个小而强大的、独立的(self-contained)、无服务器的(serverless)、零配置的(zero-configuration) SQL 数据库。 
<H3>备份和恢复</H3>实用备份和恢复 SQLite 数据库命令。举个例子，你可以编辑备份文件来修改字段的属性和类型，然后再恢复这个数据库。这比使用 SQL 
命令来得容易。对于 3.x 数据库可使用 <CODE>sqlite3</CODE>。 
<PRE># sqlite database.db .dump &gt; dump.sql              <SPAN class="cmt"># 备份</SPAN>
# sqlite database.db &lt; dump.sql                    <SPAN class="cmt"># 恢复</SPAN>
</PRE>
<H3>转换 2.x 到 3.x 数据库</H3>
<PRE>sqlite database_v2.db .dump | sqlite3 database_v3.db</PRE></DIV>
<DIV id="quota">
<H1><A>磁盘限额</A></H1>磁盘限额用来限制磁盘空间大小和/或用户(或用户组)可用的文件数。The quotas are allocated on 
a per-file system basis and are enforced by the kernel. 
<H2>Linux 设置</H2>Quota 工具包通常已安装，其包含一些命令行工具。<BR>在 fstab 
中激活用户配额并重新挂载分区。如果分区正在使用，关闭所有使用的文件，或者重启系统。添加 <CODE>usrquota</CODE> 到 fstab 
的挂载类型中，举个例子： 
<PRE>/dev/sda2     /home    reiserfs     rw,acl,user_xattr,usrquota 1 1
# mount -o remount /home
# mount                              <SPAN class="cmt"># 检查 usrquota 已经激活，否则重启</SPAN>
</PRE>
用 <CODE>quotacheck</CODE> 初始化 quota.user 文件。 
<PRE># quotacheck -vum /home
# chmod 644 /home/aquota.user        <SPAN class="cmt"># 让用户检查自己的配额</SPAN>
</PRE>
用脚本(e.g. SuSE 的 /etc/init.d/quotad)或 <CODE>quotaon</CODE> 来启用限额： 
<PRE>quotaon -vu /home</PRE>检查配额启用情况： 
<PRE>quota -v</PRE>
<H2>FreeBSD 设置</H2>Quota 工具是 FreeBSD 基本系统的一部分，然而内核需要 quota 选项。如果不存在，新增它并<A href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#compilekernel">重新编译</A>内核。 
<PRE>options QUOTA</PRE>与 Linux 一样，添加限额到 fstab 选项(是 userquota，而不是 usrquota)中： 
<PRE>/dev/ad0s1d    /home    ufs     rw,noatime,userquota    2  2
# mount /home                        <SPAN class="cmt"># 重新挂载分区</SPAN>
</PRE>
在 /etc/rc.conf 中启用磁盘限额并开启 quota 服务。 
<PRE># grep quotas /etc/rc.conf
enable_quotas="YES"                  <SPAN class="cmt"># 在启动时打开限额(或者 "NO")</SPAN>
check_quotas="YES"                   <SPAN class="cmt"># 在启动时检查限额(或者 "NO")</SPAN>
# /etc/rc.d/quota start
</PRE>
<H2 id="assignquota">分配限额</H2>磁盘限额默认并不限制(设置为0)。用 <CODE>edquota</CODE> 
来对单用户进行限制。一个 quota 也可给许多用户复用。虽然 quota 
实现之间的文件结构不同，但其原理是相同的：限制节点(inodes)数量以及使用者可以取用的磁盘区块数量。<I>Only change the values of 
soft and hard</I>. 如果未指定，默认区块大小为 1k。使用 <CODE>edquota -t</CODE> 设置 grace 时间。举个例子： 
<PRE># edquota -u colin</PRE>
<H3>Linux</H3>
<PRE>Disk quotas for user colin (uid 1007):
  Filesystem         blocks       soft       hard     inodes     soft     hard
  /dev/sda8            108       1000       2000          1        0        0
</PRE>
<H3>FreeBSD</H3>
<PRE>Quotas for user colin:
/home: kbytes in use: 504184, limits (soft = 700000, hard = 800000)
   inodes in use: 1792, limits (soft = 0, hard = 0)
</PRE>
<H3>给许多用户分配限额</H3>命令 <CODE>edquota -p</CODE> 用来复用一个 quota 
给其他用户。举个例子，复用所指用户的限额给所有用户： 
<PRE># edquota -p refuser `awk -F: $3 &gt; 499 {print $1}' /etc/passwd`
# edquota -p refuser user1 user2     <SPAN class="cmt"># 复用给 2 个用户</SPAN>
</PRE>
<H3>检查</H3>用户只需输入 <CODE>quota</CODE> (文件 quota.user 必须可读) 来可以检查他们的限额。Root 
可以查看所有用户的限额。 
<PRE># quota -u colin                     <SPAN class="cmt"># 查看用户的限额</SPAN>
# repquota /home                     <SPAN class="cmt"># 所有用户在这个分区上的限额情况</SPAN>
</PRE></DIV>
<DIV id="shells">
<H1><A>Shells</A></H1>许多 Linux 发行版使用 BASH Shell，BSD 使用的是 tcsh，Bourne Shell 
仅用于脚本。过滤器(Filter)非常有用并且可用于管道(pipe)： 
<UL style="list-style-type: none;">
  <LI><CODE>grep</CODE> &nbsp;  &nbsp;模式匹配</LI>
  <LI><CODE>sed</CODE> &nbsp; &nbsp; 查找并替换字符串或字符</LI>
  <LI><CODE>cut</CODE> &nbsp; &nbsp; 从一个标记开始打印所指定列数据</LI>
  <LI><CODE>sort</CODE> &nbsp; &nbsp;按字母或数字排序</LI>
  <LI><CODE>uniq</CODE> &nbsp; &nbsp;删除一个文件中重复行</LI></UL>举个例子，一次使用所有命令： 
<PRE># ifconfig | sed 's/  / /g' | cut -d" " -f1 | uniq | grep -E "[a-z0-9]+" | sort -r
# ifconfig | sed '/.*inet addr:/!d;s///;s/ .*//'|sort -t. -k1,1n -k2,2n -k3,3n -k4,4n
</PRE>
sed 的模式字符串中的第一个字符是一个 tab。要在命令控制台中输入 tab，可以使用 ctrl-v ctrl-tab。 
<H2 id="bash">bash</H2>Bash、sh 的重定向<SPAN 
class="fn">译注：当执行一个程序时，运行该程序的进程打开了3个文件描述符，分别是：0(标准输入)、1(标准输出)和2(标准错误输出)。重定向输出符号(&gt;)是 
1&gt;的简写，它通知 shell 重定向标准输出。类似的，&lt;是 0&lt;的简写，表示重定向标准输入。符号 
2&gt;将重定向标准错误输出。</SPAN>和管道： 
<PRE># cmd 1&gt; file                         <SPAN class="cmt"># 重定向标准输出到 file。</SPAN>
# cmd 2&gt; file                         <SPAN class="cmt"># 重定向标准错误输出到 file。</SPAN>
# cmd 1&gt;&gt; file                        <SPAN class="cmt"># 重定向标准输出并追加到 file。</SPAN>
# cmd &amp;&gt; file                         <SPAN class="cmt"># 重定向标准输出和标准错误输出到 file。</SPAN>
# cmd &gt;file 2&gt;&amp;1                      <SPAN class="cmt"># 重定向标准错误输出到标准输出然后重定向到 file。</SPAN>
# cmd1 | cmd2                         <SPAN class="cmt"># cmd1 的输出通过管道连接到 cmd2 的输入</SPAN>
# cmd1 2&gt;&amp;1 | cmd2                    <SPAN class="cmt"># cmd1 的输出和错误输出通过管道连接到 cmd2 的输入</SPAN>
</PRE>
修改你的配置文件 ~/.bashrc (也可以是 ~/.bash_profile)。下列条目非常有用，使用". .bashrc"重新加载。 
<PRE style="page-break-inside: avoid;"># in .bashrc
bind '"\e[A"':history-search-backward <SPAN class="cmt"># 使用上下键查找</SPAN>
bind '"\e[B"':history-search-forward  <SPAN class="cmt"># 历史命令。无价之宝!</SPAN>
set -o emacs                          <SPAN class="cmt"># Set emacs mode in bash (看下面)</SPAN>
set bell-style visible                <SPAN class="cmt"># Do not beep, inverse colors</SPAN>
    <SPAN class="cmt"># 设置一个漂亮的提示符像 [user@host]/path/todir&gt;</SPAN>
PS1="\[\033[1;30m\][\[\033[1;34m\]\u\[\033[1;30m\]"
PS1="$PS1@\[\033[0;33m\]\h\[\033[1;30m\]]\[\033[0;37m\]"
PS1="$PS1\w\[\033[1;30m\]&gt;\[\033[0m\]"
</PRE>
<PRE><SPAN class="cmt"># 要检查当前可用别名(alias)，只需简单输入命令 alias</SPAN>
alias  ls='ls -aF'                    <SPAN class="cmt"># 添加指示符(*/=&gt;@| 其中之一)</SPAN>
alias  ll='ls -aFls'                  <SPAN class="cmt"># 清单</SPAN>
alias  la='ls -all'
alias ..='cd ..'
alias ...='cd ../..'
export HISTFILESIZE=5000              <SPAN class="cmt"># 巨大的历史记录</SPAN>
export CLICOLOR=1                     <SPAN class="cmt"># 使用颜色(如果可用)</SPAN>
export LSCOLORS=ExGxFxdxCxDxDxBxBxExEx
</PRE>
<H2 id="tcsh">tcsh</H2>Tcsh、csh 的重定向和管道(&gt; 和 &gt;&gt; 同 sh 中一样)： 
<PRE># cmd &gt;&amp; file                         <SPAN class="cmt"># 重定向标准输出和标准错误输出到 file。</SPAN>
# cmd &gt;&gt;&amp; file                        <SPAN class="cmt"># 追加标准输出和标准错误输出到 file。</SPAN>
# cmd1 | cmd2                         <SPAN class="cmt"># cmd1 的输出通过管道连接到 cmd2 的输入</SPAN>
# cmd1 |&amp; cmd2                        <SPAN class="cmt"># cmd1 的输出和错误输出通过管道连接到 cmd2 的输入</SPAN>
</PRE>Csh/tcsh 
的设置在 <CODE>~/.cshrc</CODE> 中，使用"source .cshrc"来重新加载。例子： 
<PRE style="page-break-inside: avoid;"># in .cshrc
alias  ls      'ls -aF'
alias  ll      'ls -aFls'
alias  la      'ls -all'
alias  ..      'cd ..'
alias  ...     'cd ../..'
set   prompt    = "%B%n%b@%B%m%b%/&gt; " <SPAN class="cmt"># 像 user@host/path/todir&gt;</SPAN>
set   history   =  5000
set   savehist  = ( 6000 merge )
set   autolist                        <SPAN class="cmt"># 控制命令补全和变量补全</SPAN>
set   visiblebell                     <SPAN class="cmt"># 使用闪动屏幕的方式来取代蜂鸣器鸣叫</SPAN>
</PRE>
<PRE><SPAN class="cmt"># Bindkey 和颜色</SPAN>
bindkey -e     Select Emacs bindings  <SPAN class="cmt"># 将命令行编辑器切换到emacs模式</SPAN>
bindkey -k up history-search-backward <SPAN class="cmt"># 使用上下键来搜索</SPAN>
bindkey -k down history-search-forward
setenv CLICOLOR 1                     <SPAN class="cmt"># 使用颜色(可能的话)</SPAN>
setenv LSCOLORS ExGxFxdxCxDxDxBxBxExEx
</PRE>该 
emacs 模式将使用 emacs 快捷键来修改命令提示行。这是非常有用的(不单为 Emacs 用户)。最常用的命令如下： 
<UL style="list-style-type: none;">
  <LI>C-a &nbsp; &nbsp; &nbsp; 移动光标到行头</LI>
  <LI>C-e &nbsp; &nbsp; &nbsp; 移动光标到行尾</LI>
  <LI>M-b &nbsp; &nbsp; &nbsp; 移动光标到前一个单词</LI>
  <LI>M-f &nbsp; &nbsp; &nbsp; 移动光标到后一个单词</LI>
  <LI>M-d &nbsp; &nbsp; &nbsp; 剪切下一个单词</LI>
  <LI>C-w &nbsp; &nbsp; &nbsp; 剪切最后一个单词</LI>
  <LI>C-u &nbsp; &nbsp; &nbsp; 剪切光标前所有字符</LI>
  <LI>C-k &nbsp; &nbsp; &nbsp; 剪切光标后所有字符</LI>
  <LI>C-y &nbsp; &nbsp; &nbsp; 粘帖最后剪切的字符(简易的粘帖)</LI>
  <LI>C-_ &nbsp; &nbsp; &nbsp; 重做</LI></UL><I>注意:</I> C- = 按住 control 键，M- = 按住 
meta (它通常为 alt 或者 escape)键。 </DIV>
<DIV id="scripting">
<H1><A>脚本</A></H1>
<P class="xrefp"><A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#bournebasics">基础</A> 
| <A class="xrefp" href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#bourneexample">脚本实例</A> 
| <A class="xrefp" 
href="http://www.ha97.com/book/unixtoolbox_zh_CN.html#sed">sed/实用命令</A></P>Bourne 
shell<SPAN class="fn">译注：Shell 存在很多种，如 bash(Bourne Again Shell),csh(C 
Shell),tcsh(TC Shell),zsh(Z Shell) 等。通过 ps 命令可识别出正在运行的是哪种 Shell。</SPAN> 
(/bin/sh) 存在于所有的 Unix 系统上，并且用她写的脚本是(完全)可移植的； <CODE>man 1 sh</CODE> 是一个好的参考。 
<H2 id="bournebasics">基础</H2>
<H3>变量和参数</H3>使用 <CODE>variable=value</CODE> 的命令格式设置变量，其中 variable 
是变量名称，value是打算赋给该变量的值。使用 $variable 获取变量值。 
<PRE>MESSAGE="Hello World"                        <SPAN class="cmt"># 赋予一个字符串</SPAN>
PI=3.1415                                    <SPAN class="cmt"># 赋予一个十进制小数</SPAN>
N=8
TWON=`expr $N * 2`                           <SPAN class="cmt"># 算术表达式(只限整数)</SPAN>
TWON=$(($N * 2))                             <SPAN class="cmt"># 另一种语法</SPAN>
TWOPI=`echo "$PI * 2" | bc -l`               <SPAN class="cmt"># 使用 bc 进行浮点运算</SPAN>
ZERO=`echo "c($PI/4)-sqrt(2)/2" | bc -l`
</PRE>命令行参数： 
<PRE>$0, $1, $2, ...                              <SPAN class="cmt"># $0 命令本身</SPAN> 
$#                                           <SPAN class="cmt"># 命令参数个数</SPAN>
$*                                           <SPAN class="cmt"># 所有参数(也可以是 $@)</SPAN>
</PRE>
<H3>一些特殊的变量</H3>
<PRE>$$                                           <SPAN class="cmt"># 当前进程 ID</SPAN>
$?                                           <SPAN class="cmt"># 最后命令退出状态码</SPAN>
  command
  <SPAN class="keyword">if</SPAN> [ $<SPAN class="pp">?</SPAN> != 0 ]; <SPAN class="keyword">then</SPAN>
    echo "command failed"
  <SPAN class="keyword">fi</SPAN>
<SPAN class="pp">mypath</SPAN>=`pwd`
<SPAN class="pp">mypath</SPAN>=${<SPAN class="pp">mypath</SPAN>}/file.txt
echo ${<SPAN class="pp">mypath</SPAN>##*/}                           <SPAN class="cmt"># 只显示文件名</SPAN>
echo ${<SPAN class="pp">mypath</SPAN>%%.*}                           <SPAN class="cmt"># 除了扩展名的全路径</SPAN>
<SPAN class="pp">var2</SPAN>=${<SPAN class="pp">var</SPAN>:=string}                          <SPAN class="cmt"># 如果var没有被赋值，则string值先赋值给var，
                                             # 然后再赋值给var2</SPAN>
</PRE>
<H3>结构控制</H3>
<PRE><SPAN class="keyword">for</SPAN> <SPAN class="pp">file</SPAN> in `ls`
<SPAN class="keyword">do</SPAN>
    echo $<SPAN class="pp">file</SPAN>
<SPAN class="keyword">done</SPAN>

<SPAN class="pp">count</SPAN>=0
<SPAN class="keyword">while</SPAN> [ $<SPAN class="pp">count</SPAN> -lt 5 ]; <SPAN class="keyword">do</SPAN>
    echo $<SPAN class="pp">count</SPAN>
    sleep 1
    <SPAN class="pp">count</SPAN>=$(($<SPAN class="pp">count</SPAN> + 1))
<SPAN class="keyword">done</SPAN>

myfunction() {
    find . -type f -name "*.$<SPAN class="pp">1</SPAN>" -print       <SPAN class="cmt"># $1 为方法的第一个参数</SPAN>
}
myfunction "txt"
</PRE>
<H4>产生一个文件</H4>
<PRE><SPAN class="pp">MYHOME</SPAN>=/home/colin
cat &gt; testhome.sh &lt;&lt; _EOF
<SPAN class="cmt"># 所有_EOF前的代码都会进入到 testhome.sh 文件中去</SPAN>
<SPAN class="keyword">if</SPAN> [ -d "$<SPAN class="pp">MYHOME</SPAN>" ] ; <SPAN class="keyword">then</SPAN>
    echo $<SPAN class="pp">MYHOME</SPAN> exists
<SPAN class="keyword">else</SPAN>
    echo $<SPAN class="pp">MYHOME</SPAN> does not exist
<SPAN class="keyword">fi</SPAN>
_EOF
sh testhome.sh
</PRE>
<H2 id="bourneexample">Bourne 脚本实例</H2>来一个小实例，此脚本从本 xhtml 文档创建一个 PDF 小册子： 
<PRE style="page-break-inside: avoid;"><SPAN class="pp">#!/bin/sh</SPAN>
<SPAN class="cmt"># 此脚本可以创建一份供双面打印机打印的 PDF 格式的书</SPAN>
<SPAN class="keyword">if</SPAN> [ $<SPAN class="pp">#</SPAN> <SPAN class="keyword">-ne</SPAN> 1 ]; <SPAN class="keyword">then</SPAN>                        <SPAN class="cmt"># 检查参数是否等于 1</SPAN>
  echo 1&gt;&amp;2 "Usage: $0 HtmlFile"
  <SPAN class="keyword">exit</SPAN> 1                                     <SPAN class="cmt"># 如果不等于1，非0退出</SPAN>
<SPAN class="keyword">fi</SPAN>

<SPAN class="pp">file</SPAN>=$<SPAN class="pp">1</SPAN>                                      <SPAN class="cmt"># 文件变量</SPAN>
<SPAN class="pp">fname</SPAN>=${<SPAN class="pp">file</SPAN>%.*}                             <SPAN class="cmt"># 文件名变量</SPAN>
<SPAN class="pp">fext</SPAN>=${<SPAN class="pp">file</SPAN>#*.}                              <SPAN class="cmt"># 文件扩展名变量</SPAN>

prince $<SPAN class="pp">file</SPAN> -o $<SPAN class="pp">fname</SPAN>.pdf                   <SPAN class="cmt"># www.princexml.com</SPAN>
pdftops -paper A4 -noshrink $<SPAN class="pp">fname</SPAN>.pdf $<SPAN class="pp">fname</SPAN>.ps <SPAN class="cmt"># 创建 postscript 小册子</SPAN>
cat $<SPAN class="pp">fname</SPAN>.ps |psbook|psnup -Pa4 -2 |pstops -b "2:0,1U(21cm,29.7cm)" &gt; $<SPAN class="pp">fname</SPAN>.book.ps

ps2pdf13 -sPAPERSIZE=a4 -sAutoRotatePages=None $<SPAN class="pp">fname</SPAN>.book.ps $<SPAN class="pp">fname</SPAN>.book.pdf
                                             <SPAN class="cmt"># 在 Windows 上使用 #a4 和 #None!</SPAN>
<SPAN class="keyword">exit</SPAN> 0                                       <SPAN class="cmt"># exit 0 意为成功</SPAN>
</PRE>
<H2 id="sed">一些 sed 命令</H2>这里是<A href="http://student.northpark.edu/pemente/sed/sed1line.txt">单行 
sed 命令的金矿</A><SPAN 
class="fn">http://student.northpark.edu/pemente/sed/sed1line.txt</SPAN>。还有一个很好的 
<A href="http://www.grymoire.com/Unix/Sed.html">sed 介绍及教程</A><SPAN 
class="fn">http://www.grymoire.com/Unix/Sed.html</SPAN>。 
<PRE>sed 's/string1/string2/g'                    <SPAN class="cmt"># 替换 string1 为 string2</SPAN>
sed -i 's/wroong/wrong/g' *.txt              <SPAN class="cmt"># 用 g 替换所有返回的单词</SPAN>
sed 's/\(.*\)1/\12/g'                        <SPAN class="cmt"># 修改 anystring1 为 anystring2</SPAN>
sed '/&lt;p&gt;/,/&lt;\/p&gt;/d' t.xhtml                 <SPAN class="cmt"># 删除以 &lt;p&gt; 开始，以 &lt;/p&gt; 结尾的行</SPAN>
sed '/ *#/d; /^ *$/d'                        <SPAN class="cmt"># 删除注释和空行</SPAN>
sed 's/[ \t]*$//'                            <SPAN class="cmt"># 删除行尾空格 (使用 tab 代替 \t)</SPAN>
sed 's/^[ \t]*//;s/[ \t]*$//'                <SPAN class="cmt"># 删除行头尾空格</SPAN>
sed 's/[^*]/[&amp;]/'                            <SPAN class="cmt"># 括住首字符 [] top -&gt; [t]op</SPAN>
sed = file | sed 'N;s/\n/\t/' &gt; file.num     <SPAN class="cmt"># 为文件添加行号</SPAN>
</PRE>
<H2 id="regex">正则表达式</H2>一些基本的正则表达式同样可用于 sed。作为一个良好的启蒙，可看 <A href="http://www.regular-expressions.info/reference.html">基本正则语法</A><SPAN 
class="fn">http://www.regular-expressions.info/reference.html</SPAN>。 
<PRE>[\^$.|?*+()                          <SPAN class="cmt"># 特殊字符，其他字符将匹配自身</SPAN>
\                                    <SPAN class="cmt"># 转义特殊字符，当成普通字符对待</SPAN>
*                                    <SPAN class="cmt"># 重复前项 0 次或多次</SPAN>
.                                    <SPAN class="cmt"># 单个字符除换行符</SPAN>
.*                                   <SPAN class="cmt"># 匹配 0 个或多个字符</SPAN>
^                                    <SPAN class="cmt"># 匹配字符串行开始处</SPAN>
$                                    <SPAN class="cmt"># 匹配字符串行结尾处</SPAN>
.$                                   <SPAN class="cmt"># 匹配字符串行最后一个字符</SPAN>
^ $                                  <SPAN class="cmt"># 匹配单个空格的行</SPAN>
[^A-Z]                               <SPAN class="cmt"># 匹配任何以 A-Z 字符开始的行</SPAN>
</PRE>
<H2 id="shcmd">一些实用命令</H2>下列命令对于包含于一个脚本或者单行命令来说很有用。 
<PRE>sort -t. -k1,1n -k2,2n -k3,3n -k4,4n         <SPAN class="cmt"># 排序 IPv4 格式的 IP 地址</SPAN>
echo 'Test' | tr '[:lower:]' '[:upper:]'     <SPAN class="cmt"># 转换成大写</SPAN>
echo foo.bar | cut -d . -f 1                 <SPAN class="cmt"># 返回 foo</SPAN>
PID=$(ps | grep script.sh | grep bin | awk '{print $1}')          <SPAN class="cmt"># 正在运行名为 script 脚本的 PID</SPAN>
PID=$(ps axww | grep [p]ing | awk '{print $1}')                   <SPAN class="cmt"># ping 的 PID (w/o grep pid)</SPAN>
IP=$(ifconfig $INTERFACE | sed '/.*inet addr:/!d;s///;s/ .*//')   <SPAN class="cmt"># Linux</SPAN>
IP=$(ifconfig $INTERFACE | sed '/.*inet /!d;s///;s/ .*//')        <SPAN class="cmt"># FreeBSD</SPAN>
if [ `diff file1 file2 | wc -l` != 0 ]; then [...] fi             <SPAN class="cmt"># 文件改变了？</SPAN>
cat /etc/master.passwd | grep -v root | grep -v \*: | awk -F":" \ <SPAN class="cmt"># 创建 http passwd</SPAN>
'{ printf("%s:%s\n", $1, $2) }' &gt; /usr/local/etc/apache2/passwd

testuser=$(cat /usr/local/etc/apache2/passwd | grep -v \    <SPAN class="cmt"># 查看 passwd 中的用户</SPAN>
root | grep -v \*: | awk -F":" '{ printf("%s\n", $1) }' | grep ^user$)
:(){ :|:&amp; };:                                <SPAN class="cmt"># bash fork 炸弹。会干掉你的机器<SPAN class="fn">译注：http://forum.ubuntu.org.cn/viewtopic.php?t=92074</SPAN></SPAN>
tail +2 file &gt; file2                         <SPAN class="cmt"># 删除文件的第一行</SPAN>
</PRE>
我使用一种小伎俩来一次更改许多文件的扩展名。举个例子，从 .cxx 到 .cpp。排除最后的 <CODE>| sh</CODE> 先测试一下。你同样可以使用命令 
<CODE>rename</CODE> 来做这些，如果安装了的话。或者使用 bash 内建命令。 
<PRE># ls *.cxx | awk -F. '{print "mv "$0" "$1".cpp"}' | sh
# ls *.c | sed "s/.*/cp &amp; &amp;.$(date "+%Y%m%d")/" | sh <SPAN class="cmt"># 如 拷贝 *.c 成 *.c.20080401</SPAN>
# rename .cxx .cpp *.cxx                             <SPAN class="cmt"># 重命名所有 .cxx 成 .cpp</SPAN>
# for i in *.cxx; do mv $i ${i%%.cxx}.cpp; done      <SPAN class="cmt"># bash 内建的</SPAN>
</PRE></DIV>
<DIV id="programming">
<H1><A>编程</A></H1>
<H2 id="cbasics">C 基础</H2>
<PRE>strcpy(newstr,str)                        <SPAN class="cmt">/* 拷贝 str 到 newstr */</SPAN>
expr1 ? expr2 : expr3                     <SPAN class="cmt">/* if (expr1) expr2 else expr3 */</SPAN>
x = (y &gt; z) ? y : z;                      <SPAN class="cmt">/* if (y &gt; z) x = y; else x = z; */</SPAN>
int a[]={0,1,2};                          <SPAN class="cmt">/* 初始化数组 (或者 a[3]={0,1,2}; */</SPAN>
int a[2][3]={{1,2,3},{4,5,6}};            <SPAN class="cmt">/* 初始化二维数组 */</SPAN>
int i = 12345;                            <SPAN class="cmt">/* 从 i 转换成 char str */</SPAN>
char str[10];
sprintf(str, "%d", i);
</PRE>
<H2>C 实例</H2>一个最小化的 C 程式 simple.c： 
<PRE><SPAN class="pp">#include</SPAN> &lt;stdio.h&gt;
main() {
    <SPAN class="keyword">int</SPAN> number=42;
    printf("The answer is %i\n", number);  
}
</PRE>编译： 
<PRE># gcc simple.c -o simple
# ./simple
The answer is 42
</PRE>
<H2 id="cppbasics">C++ 基础</H2>
<PRE>*pointer                                  <SPAN class="cmt">// 指向对象的指针</SPAN>
&amp;obj                                      <SPAN class="cmt">// 对象 obj 的地址</SPAN>
obj.x                                     <SPAN class="cmt">// 类(对象) obj 成员 x</SPAN>
pobj-&gt;x                                   <SPAN class="cmt">// 指针 pobj 指向类(对象)成员 x</SPAN>
                                          <SPAN class="cmt">// (*pobj).x 同 pobj-&gt;x</SPAN>
</PRE>
<H2>C++ 实例</H2>来一个稍微现实一点的 C++ 
程序，我们在一个头文件(IPv4.h)中创建一个类并且实现它(IPv4.cpp)，然后创建一个程式来使用其功能。这个类的成员方法实现了 IP 
地址从一串整数转换成我们熟知的点分格式。这是一个最小化的 C++ 程式和多源文件(multi-source)的编译。 
<H3>IPv4 class</H3>
<H4>IPv4.h:</H4>
<PRE style="page-break-inside: avoid;"><SPAN class="pp">#ifndef</SPAN> IPV4_H
<SPAN class="pp">#define</SPAN> IPV4_H
<SPAN class="pp">#include</SPAN> &lt;string&gt;

<SPAN class="keyword">namespace</SPAN> GenericUtils {                          <SPAN class="cmt">// 创建 namespace
</SPAN><SPAN class="keyword">class</SPAN> IPv4 {                                      <SPAN class="cmt">// 类定义
</SPAN><SPAN class="keyword">public</SPAN>:
    IPv4();
    ~IPv4();
    std::string IPint_to_IPquad(<SPAN class="keyword">unsigned</SPAN> <SPAN class="keyword">long</SPAN> ip);<SPAN class="cmt">// 成员方法接口
</SPAN>};
} <SPAN class="cmt">//namespace GenericUtils</SPAN>
<SPAN class="pp">#endif</SPAN> <SPAN class="cmt">// IPV4_H
</SPAN></PRE>
<H4>IPv4.cpp:</H4>
<PRE style="page-break-inside: avoid;"><SPAN class="pp">#include</SPAN> "IPv4.h"
<SPAN class="pp">#include</SPAN> &lt;string&gt;
<SPAN class="pp">#include</SPAN> &lt;sstream&gt;
<SPAN class="keyword">using</SPAN> <SPAN class="keyword">namespace</SPAN> std;                              <SPAN class="cmt">// 使用 namespace
</SPAN><SPAN class="keyword">using</SPAN> <SPAN class="keyword">namespace</SPAN> GenericUtils;

IPv4::IPv4() {}                                   <SPAN class="cmt">// 默认构造/析构函数
</SPAN>IPv4::~IPv4() {}
string IPv4::IPint_to_IPquad(<SPAN class="keyword">unsigned</SPAN> <SPAN class="keyword">long</SPAN> ip) {  <SPAN class="cmt">// 成员方法实现
</SPAN>    ostringstream ipstr;                          <SPAN class="cmt">// 使用字符串流
</SPAN>    ipstr &lt;&lt; ((ip &amp;0xff000000) &gt;&gt; 24)             <SPAN class="cmt">// 位右移
</SPAN>          &lt;&lt; "." &lt;&lt; ((ip &amp;0x00ff0000) &gt;&gt; 16)
          &lt;&lt; "." &lt;&lt; ((ip &amp;0x0000ff00) &gt;&gt; 8)
          &lt;&lt; "." &lt;&lt; ((ip &amp;0x000000ff));
    <SPAN class="keyword">return</SPAN> ipstr.str();
}
</PRE>
<H3>程序 simplecpp.cpp</H3>
<PRE style="page-break-inside: avoid;"><SPAN class="pp">#include</SPAN> "IPv4.h"
<SPAN class="pp">#include</SPAN> &lt;iostream&gt;
<SPAN class="pp">#include</SPAN> &lt;string&gt;
<SPAN class="keyword">using</SPAN> <SPAN class="keyword">namespace</SPAN> std;

<SPAN class="keyword">int</SPAN> main (<SPAN class="keyword">int</SPAN> argc, <SPAN class="keyword">char</SPAN>* argv[]) {
    string ipstr;                                 <SPAN class="cmt">// 定义变量
</SPAN>    <SPAN class="keyword">unsigned</SPAN> <SPAN class="keyword">long</SPAN> ipint = 1347861486;             <SPAN class="cmt">// 数字形式的 IP</SPAN>
    GenericUtils::IPv4 iputils;                   <SPAN class="cmt">// 创建一个类的对象
</SPAN>    ipstr = iputils.IPint_to_IPquad(ipint);       <SPAN class="cmt">// 调研类的成员方法
</SPAN>    cout &lt;&lt; ipint &lt;&lt; " = " &lt;&lt; ipstr &lt;&lt; endl;      <SPAN class="cmt">// 输出结果</SPAN>

    <SPAN class="keyword">return</SPAN> 0;
}
</PRE>编译和执行： 
<PRE style="page-break-before: avoid;"># g++ -c IPv4.cpp simplecpp.cpp                <SPAN class="cmt"># 编译成目标文件</SPAN>
# g++ IPv4.o simplecpp.o -o simplecpp.exe      <SPAN class="cmt"># 连接目标代码，生成可执行文件</SPAN>
# ./simplecpp.exe 
1347861486 = 80.86.187.238
</PRE>使用 
<CODE>ldd</CODE> 脚本检查并列出可执行程序所依赖的共享库文件。这个命令同样可以用来检查共享库的丢失。 
<PRE># ldd /sbin/ifconfig</PRE>
<H2 id="makefile">简单的 Makefile</H2>相应的最小化多源文件(multi-source)编译 Makefile 
显示如下。每一个命令行必须以 <I>tab</I> 开始！可以将一个较长行使用反斜线"\"来分解为多行。 
<PRE style="page-break-inside: avoid;"><SPAN class="pp">CC</SPAN> = g++
<SPAN class="pp">CFLAGS</SPAN> = -O
<SPAN class="pp">OBJS</SPAN> = IPv4.o simplecpp.o

<SPAN class="keyword">simplecpp</SPAN>: ${OBJS}
	${CC} -o simplecpp ${CFLAGS} ${OBJS}
<SPAN class="keyword">clean</SPAN>:
	rm -f ${TARGET} ${OBJS}
</PRE></DIV>
<DIV id="onlinehelp">
<H1><A>在线帮助</A></H1>
<H2 id="documentation">文档</H2>
<TABLE>
  <TBODY>
  <TR>
    <TD><A href="http://en.tldp.org/">Linux 文档</A> </TD>
    <TD>en.tldp.org</TD></TR>
  <TR>
    <TD><A href="http://www.linuxmanpages.com/">Linux Man Pages</A> </TD>
    <TD>www.linuxmanpages.com</TD></TR>
  <TR>
    <TD><A href="http://www.oreillynet.com/linux/cmd/">Linux 命令目录</A> </TD>
    <TD>www.oreillynet.com/linux/cmd</TD></TR>
  <TR>
    <TD><A href="http://linux.die.net/">Linux doc man howtos</A> </TD>
    <TD>linux.die.net</TD></TR>
  <TR>
    <TD><A href="http://www.freebsd.org/handbook/">FreeBSD 手册</A> </TD>
    <TD>www.freebsd.org/handbook</TD></TR>
  <TR>
    <TD><A href="http://www.freebsd.org/cgi/man.cgi">FreeBSD Man Pages</A> </TD>
    <TD>www.freebsd.org/cgi/man.cgi</TD></TR>
  <TR>
    <TD><A href="http://www.freebsdwiki.net/">FreeBSD 用户 wiki</A> </TD>
    <TD>www.freebsdwiki.net</TD></TR>
  <TR>
    <TD><A href="http://docs.sun.com/app/docs/coll/40.10">Solaris Man 
      Pages</A> </TD>
    <TD>docs.sun.com/app/docs/coll/40.10</TD></TR></TBODY></TABLE>
<H2 id="crossref">其他 Unix/Linux 参考</H2>
<TABLE>
  <TBODY>
  <TR>
    <TD><A href="http://bhami.com/rosetta.html">Rosetta Stone for Unix</A> </TD>
    <TD>bhami.com/rosetta.html (a Unix command translator)</TD></TR>
  <TR>
    <TD><A href="http://unixguide.net/unixguide.shtml">Unix guide cross 
      reference</A> </TD>
    <TD>unixguide.net/unixguide.shtml</TD></TR>
  <TR>
    <TD><A href="http://www.linuxguide.it/linux_commands_line_en.htm" rel="nofollow">Linux 
      命令行列表</A> </TD>
    <TD>www.linuxguide.it/commands_list.php</TD></TR>
  <TR>
    <TD><A href="http://www.pixelbeat.org/cmdline.html" rel="nofollow">Short 
      Linux reference</A> </TD>
    <TD>www.pixelbeat.org/cmdline.html</TD></TR></TBODY></TABLE></DIV>
<P class="last">That's all folks!</P><!-- </div>  end main --> <!-- page break --> <!-- <div class="pb" /> --> 
<DIV class="footerlast">This document: "Unix Toolbox revision 12" is licensed 
under a <A href="http://creativecommons.org/licenses/by-sa/3.0/" 
rel="nofollow">Creative Commons Licence [Attribution - Share Alike]</A>. © <A 
href="mailto:c_at_cb.vu">Colin Barschel and Greco Shi</A> 2007-2008. Some rights 
reserved. </DIV></DIV></BODY></HTML>
